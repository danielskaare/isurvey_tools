# -*- coding: utf-8 -*-
"""
/***************************************************************************
 iSurveyTools
                                 A QGIS plugin
 This plugin is a tool to easier import data from iSurveys Masterfile
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-01-16
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Daniel Sk√•re
        email                : dags@isurvey-group.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.utils import iface # 2020-02-09 kele

# Import necessary geometric objects from shapely module
#from shapely.geometry import Point, LineString

import sqlite3, sys
import pandas as pd
from qgis.core import QgsVectorLayer, QgsVectorFileWriter, QgsProject, QgsPoint, QgsFeature, QgsGeometry, QgsPointXY, QgsField, QgsPalLayerSettings, QgsTextFormat, QgsRuleBasedLabeling, QgsMessageLog, QgsSymbol, QgsRendererCategory, QgsSimpleFillSymbolLayer, QgsCategorizedSymbolRenderer, QgsVectorLayerSimpleLabeling
from urllib.request import pathname2url
from os import path
from pathlib import Path
from qchainage import chainagetool
from random import randrange

import processing   # make it possible to use the processing toolbox functions like "point to path"
import requests

from PyQt5.QtWidgets import QAction, QMessageBox, QFileDialog
# from qgis.core import (QgsCoordinateReferenceSystem,
#                        QgsCoordinateTransform,
#                        QgsProject,
#                        QgsRectangle,
#                        QgsPointXY,
#                        QgsGeometry,
#                        QgsVectorLayer,
#                        QgsFeature)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .isurvey_tools_dialog import iSurveyToolsDialog, loadEivaDialog
import os.path

class iSurveyTools:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'iSurveyTools_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&iSurvey Tools')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.eiva_first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('iSurveyTools', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/isurvey_tools/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import from Masterfile'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Create second Icon
        icon_path = ':/plugins/isurvey_tools/icon_rln.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import EIVA Feature'),
            callback=self.run_importEiva,
            parent=self.iface.mainWindow())

        # # Create third Icon
        # icon_path = ':/plugins/isurvey_tools/icon_etr.png'
        # self.add_action(
        #     icon_path,
        #     text=self.tr(u'Import E-Track'),
        #     callback=self.run_importTrack,
        #     parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.eiva_first_start = True
        #self.track_first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&iSurvey Tools'),
                action)
            self.iface.removeToolBarIcon(action)

    def openSelectDB(self):
        # dbFile,_ = QFileDialog.getOpenFileName(self, 'Open DB file', 'c:\\', "SQL Lite DB (*.db *.db3)")
        dbFile,_ = QFileDialog.getOpenFileName(self.dlg, "Open Masterfile", "", "SQLite (*.sqlite *.sqlite3);;SQLite DB (*.db *.db3);;All Files (*)")
        if dbFile:
            self.dlg.line_db_path.setText(os.path.abspath(dbFile))
            self.populate_tid_and_sid_list()

    def open_select_eiva(self):
        File,_ = QFileDialog.getOpenFileName(self.eiva_dlg, "Open EIVA files", "", "Runlines (*.rln *.rlx);;Track (*.etr);;Waypoints (*.wpt *.wp2);;All Files (*)")
        if File:
            self.eiva_dlg.path_eiva_file.setText(os.path.abspath(File))
            basename = os.path.basename(os.path.abspath(File))
            # Set filename to Layername in GUI
            self.eiva_dlg.layer_name.setValue(basename)

    # def open_select_etr(self):
    #     File,_ = QFileDialog.getOpenFileName()
    #     if File:
    #         self.track_dlg.path_etr.setText(os.path.abspath(File))

    def handle_QGIS_Project_EPSG(self):
        if self.dlg.cB_EPSG.isChecked():
            self.dlg.label_epsg.hide()
            self.dlg.sB_epsg.hide()
        elif not self.dlg.cB_EPSG.isChecked():
            self.dlg.label_epsg.show()
            self.dlg.sB_epsg.show()

    def handle_QGIS_Project_EPSG_eiva(self):
        if self.eiva_dlg.cB_EPSG.isChecked():
            self.eiva_dlg.label_epsg.hide()
            self.eiva_dlg.sB_epsg.hide()
        elif not self.eiva_dlg.cB_EPSG.isChecked():
            self.eiva_dlg.label_epsg.show()
            self.eiva_dlg.sB_epsg.show()

    def initDBConnection(self):
        master_file_path = self.dlg.line_db_path.value()
        if path.exists(master_file_path):
            print("File exists")
            dburi = 'file:{}?mode=rw'.format(pathname2url(master_file_path))
            try:
                conn = sqlite3.connect(dburi, uri=True)
            except sqlite3.OperationalError:
                dburi = 'file:{}?mode=rwc'.format(pathname2url(master_file_path))
                try:
                    conn = sqlite3.connect(dburi, uri=True)
                except:
                    print("Unexpected error:" + str(sys.exc_info()[0]))
                err2 = "Database: " + str(master_file_path) + " does not exist and will be created. Continue..."
                print(err2)
            if conn is None:
                print("Error! cannot create the database connection.")
                QMessageBox.critical(self.iface.mainWindow(),
                                     'Import Masterfile error',
                                     "Cant't connect to Masterfile. Is some other program connected to it and blocking it?\nExiting...")
            return conn
        else:
            print("File does not exist")
            return None

    def validateMasterfile(self):
        print("You pushed Validate Masterfile button")
        conn = self.initDBConnection()
        if conn is None:
            QMessageBox.critical(self.iface.mainWindow(),
                                 'Select Masterfile ',
                                 "You have not selected a valid Masterfile Database, please do so.\nExiting...")
        else:
            with conn:
                try:
                    cur = conn.cursor()
                    cur.execute('SELECT count(*) FROM rpl')
                    res = cur.fetchall()
                    if (res[0][0]==0):
                        self.dlg.cB_runline.setStyleSheet("color: red")
                        self.dlg.cB_runline.setChecked(False)
                    else:
                        self.dlg.cB_runline.setStyleSheet("color: green")
                        self.dlg.cB_runline.setChecked(True)

                    cur.execute('SELECT count(*) FROM as_laid')
                    res = cur.fetchall()
                    if (res[0][0] == 0):
                        self.dlg.cB_aslaid.setStyleSheet("color: red")
                        self.dlg.cB_aslaid.setChecked(False)
                    else:
                        self.dlg.cB_aslaid.setStyleSheet("color: green")
                        self.dlg.cB_aslaid.setChecked(True)

                    cur.execute('SELECT count(*) FROM trenching')
                    res = cur.fetchall()
                    if (res[0][0] == 0):
                        self.dlg.cB_capjet.setStyleSheet("color: red")
                        self.dlg.cB_capjet.setChecked(False)
                    else:
                        self.dlg.cB_capjet.setStyleSheet("color: green")
                        self.dlg.cB_capjet.setChecked(True)

                    cur.execute('SELECT count(*) FROM as_trenched')
                    res = cur.fetchall()
                    if (res[0][0] == 0):
                        self.dlg.cB_astrenched.setStyleSheet("color: red")
                        self.dlg.cB_astrenched.setChecked(False)
                    else:
                        self.dlg.cB_astrenched.setStyleSheet("color: green")
                        self.dlg.cB_astrenched.setChecked(True)

                    cur.execute('SELECT count(*) FROM events')
                    res = cur.fetchall()
                    if (res[0][0] == 0):
                        self.dlg.cB_events.setStyleSheet("color: red")
                        self.dlg.cB_events.setChecked(False)
                    else:
                        self.dlg.cB_events.setStyleSheet("color: green")
                        self.dlg.cB_events.setChecked(True)
                except sqlite3.IntegrityError:
                    print("Operation Types are already in this database")
                except sqlite3.DatabaseError:
                    print("Probable some of the tables or columns has the wrong name:" + str(sys.exc_info()[0]))
                except:
                    print("Unexpected error Trying to initializeDB:" + str(sys.exc_info()[0]))

    def populate_tid_and_sid_list(self):
        conn = self.initDBConnection()
        if conn is None:
            QMessageBox.critical(self.iface.mainWindow(),
                                 'Select Masterfile ',
                                 "You have not selected a valid Masterfile Database, please do so.\nExiting...")
        else:
            with conn:
                try:
                    cur = conn.cursor()
                    cur.execute('SELECT DISTINCT sid_id FROM as_trenched ORDER BY sid_id ASC;')
                    sid_tuples = cur.fetchall()
                    #print(sid_tuples)
                    cur.execute('SELECT DISTINCT trenching_id FROM trenching ORDER BY trenching_id ASC;')
                    tid_tuples = cur.fetchall()
                    #print(tid_tuples)
                    self.dlg.comboBox_TID.clear()
                    self.dlg.comboBox_SID.clear()
                    for tid_element in tid_tuples:
                        self.dlg.comboBox_TID.addItem(str(tid_element[0]))
                    print("TID OK")
                    for sid_element in sid_tuples:
                        self.dlg.comboBox_SID.addItem(str(sid_element[0]))
                    print("SID OK")
                except sqlite3.IntegrityError:
                    print("Operation Types are already in this database")
                except sqlite3.DatabaseError:
                    print("Probable some of the tables or columns has the wrong name:" + str(sys.exc_info()[0]))
                except:
                    print("Unexpected error Trying to SELECT DISTINCT sid_id and tid_id:" + str(sys.exc_info()[0]))

    def add_runline_to_proj(self, df_runline, epsg_code, runline_name):
        # df_runline.columns = ['eastings', 'northings']
        # print(df_runline.head())
        # Point list for the runline
        PointList = []
        point_dist = []
        point_dist_tot = []
        # Point Layer for Runline
        # param1 = 'Point?crs=' + str(crsId) + "&field=id:integer&field1=id2:str&field2=text2:str&field3=text3:str&field4=text4:str&text5=id5:str&index=yes"
        param1 = "Point?crs=%s&field=id:integer&index=yes" % (str(epsg_code))
        rpl_points_layer = self.iface.addVectorLayer(param1, str(runline_name) + '_Points',
                                                     'memory')

        # fields = rpl_points_layer.pendingFields()
        # Point feature for runline
        point_feature = QgsFeature()

        pr = rpl_points_layer.dataProvider()
        # print(pr.fields().count())
        rpl_points_layer.startEditing()
        # pr.addAttributes([QgsField("Index", QVariant.Int)])
        pr.addAttributes([QgsField("Eastings", QVariant.Double)])
        pr.addAttributes([QgsField("Northings", QVariant.Double)])
        pr.addAttributes([QgsField("From RLN [KP]", QVariant.Double)])
        pr.addAttributes([QgsField("SegmentLength[m]", QVariant.Double)])
        pr.addAttributes([QgsField("RunlineLength[KP]", QVariant.Double)])
        rpl_points_layer.updateFields()
        # print(pr.fields().count())
        # point_feature.setAttributes([1])

        for index, row in df_runline.iterrows():
            runline_points = QgsPointXY(float(row['eastings']), float(row['northings']))

            PointList.append(runline_points)
            if index == 0:
                point_dist.append(0)
                point_dist_tot.append(0)
            else:
                point_dist.append(PointList[index].distance(PointList[index - 1]))
                point_dist_tot.append(point_dist_tot[index - 1] + PointList[index].distance(PointList[index - 1]))

            point_feature.setAttributes(
                [index, float(row['eastings']), float(row['northings']), float(row['kp']), point_dist[index],
                 point_dist_tot[index] / 1000])
            point_feature.setGeometry(QgsGeometry.fromPointXY(runline_points))
            # point_feature.setAttributes(["test"])
            pr.addFeatures([point_feature])
            # point_feature.setAttribute(1, "text1")

        # Specify the geometry type
        rpl_points_layer.updateExtents()
        rpl_points_layer.commitChanges()

        # pr.addFeatures([point_feature])
        rpl_line_layer = self.iface.addVectorLayer("LineString?crs=" + str(epsg_code) + "&field=id:integer&index=yes",
                                                   str(runline_name) + "_Line", "memory")
        rpl_line_layer.startEditing()
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPolylineXY(PointList))
        feature.setAttributes([1])
        rpl_line_layer.addFeature(feature)
        rpl_line_layer.loadNamedStyle(
            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'RPL_line_direction.qml'))
        rpl_line_layer.commitChanges()

        """
        Use QChainage to get KP values every 500m
        """
        kp_layer_name = runline_name + "_KP_Points"
        chainagetool.points_along_line(layerout=kp_layer_name,
                                       startpoint=0,
                                       endpoint=False,
                                       distance=500,
                                       label="test",
                                       layer=rpl_line_layer,
                                       selected_only=False,
                                       force=True,
                                       fo_fila=False,
                                       divide=0,
                                       decimal=2)

        rpl_kp_pnt_layer = iface.activeLayer()

        # Configure label settings 1
        settings = QgsPalLayerSettings()
        settings.fieldName = "concat('KP:' + format_number(cngmeters/1000, 3))"
        settings.isExpression = True
        textFormat = QgsTextFormat()
        textFormat.setSize(10)
        settings.setFormat(textFormat)
        # create and append a new rule
        root = QgsRuleBasedLabeling.Rule(QgsPalLayerSettings())
        rule = QgsRuleBasedLabeling.Rule(settings, maximumScale=1, minimumScale=1000000)
        rule.setDescription('KP5')
        rule.setFilterExpression('cngmeters % 5000 = 0')
        rule2 = QgsRuleBasedLabeling.Rule(settings, maximumScale=1, minimumScale=50000)
        rule2.setDescription('KP05')
        rule2.setFilterExpression('cngmeters % 500 = 0')

        root.appendChild(rule)
        root.appendChild(rule2)

        # Apply label configuration
        rules = QgsRuleBasedLabeling(root)
        # rpl_kp_pnt_layer.setCustomProperty("labeling/enabled", "true")
        rpl_kp_pnt_layer.setLabeling(rules)
        rpl_kp_pnt_layer.triggerRepaint()
        # Apply label configuration
        rpl_kp_pnt_layer.setLabelsEnabled(True)

        rpl_kp_pnt_layer.loadNamedStyle(
            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'RPL_line_direction.qml'))

        """
        Set Visible Layers
        """
        node = QgsProject.instance().layerTreeRoot().findLayer(rpl_points_layer)
        if node:
            node.setItemVisibilityChecked(False)

        node2 = QgsProject.instance().layerTreeRoot().findLayer(kp_layer_name)
        if node2:
            node2.setItemVisibilityChecked(True)

        node3 = QgsProject.instance().layerTreeRoot().findLayer(rpl_line_layer)
        if node3:
            node3.setItemVisibilityChecked(True)

        print("Sucessfully added runline to proj: " + str(runline_name))

    def add_etr_track_to_proj(self, df, epsg_code, track_name):
        PointList = []
        point_dist = []
        point_dist_tot = []

        # Original Point Layer
        param1 = "Point?crs=%s&field=id:integer&index=yes" % (str(epsg_code))
        original_points_layer = self.iface.addVectorLayer(param1, str(track_name) + '_Points',
                                                     'memory')

        # Point feature for Original Point Layer
        point_feature = QgsFeature()

        pr = original_points_layer.dataProvider()
        original_points_layer.startEditing()
        pr.addAttributes([QgsField("Date[DD-MM-YY]", QVariant.String)])
        pr.addAttributes([QgsField("Time[HH:MM:SS.sss]", QVariant.String)])
        pr.addAttributes([QgsField("Eastings", QVariant.Double)])
        pr.addAttributes([QgsField("Northings", QVariant.Double)])
        pr.addAttributes([QgsField("WaterDepth[m]", QVariant.Double)])
        pr.addAttributes([QgsField("Roll[Deg]", QVariant.Double)])
        pr.addAttributes([QgsField("Pitch[Deg]", QVariant.Double)])
        pr.addAttributes([QgsField("Heading[Deg]", QVariant.Double)])
        pr.addAttributes([QgsField("Tide[m]", QVariant.Double)])
        original_points_layer.updateFields()

        for index, row in df.iterrows():
            runline_points = QgsPointXY(float(row['Easting']), float(row['Northing']))

            # If calculations is needed
            PointList.append(runline_points)
            if index == 0:
                point_dist.append(0)
                point_dist_tot.append(0)
            else:
                point_dist.append(PointList[index].distance(PointList[index - 1]))
                point_dist_tot.append(point_dist_tot[index - 1] + PointList[index].distance(PointList[index - 1]))

            point_feature.setAttributes(
                [index, row['Date'], row['Time'], float(row['Easting']), float(row['Northing']), float(row['WaterDepth']), float(row['Roll']), float(row['Pitch']), float(row['Heading']), float(row['Tide'])])
            point_feature.setGeometry(QgsGeometry.fromPointXY(runline_points))
            pr.addFeatures([point_feature])

        # Update project
        original_points_layer.updateExtents()
        original_points_layer.commitChanges()

        original_line_layer = self.iface.addVectorLayer("LineString?crs=" + str(epsg_code) + "&field=id:integer&index=yes",
                                                   str(track_name) + "_Line", "memory")
        original_line_layer.startEditing()

        # Additional Feature for Line
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPolylineXY(PointList))
        feature.setAttributes([1])
        original_line_layer.addFeature(feature)
        original_line_layer.loadNamedStyle(
            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'SID_as-trenched.qml'))
        original_line_layer.commitChanges()

        # """
        # Use QChainage to get KP values every 500m
        # """
        # kp_layer_name = runline_name + "_KP_Points"
        # chainagetool.points_along_line(layerout=kp_layer_name,
        #                                startpoint=0,
        #                                endpoint=False,
        #                                distance=500,
        #                                label="test",
        #                                layer=rpl_line_layer,
        #                                selected_only=False,
        #                                force=True,
        #                                fo_fila=False,
        #                                divide=0,
        #                                decimal=2)
        #
        # rpl_kp_pnt_layer = iface.activeLayer()
        #
        # # Configure label settings 1
        # settings = QgsPalLayerSettings()
        # settings.fieldName = "concat('KP:' + format_number(cngmeters/1000, 3))"
        # settings.isExpression = True
        # textFormat = QgsTextFormat()
        # textFormat.setSize(10)
        # settings.setFormat(textFormat)
        # # create and append a new rule
        # root = QgsRuleBasedLabeling.Rule(QgsPalLayerSettings())
        # rule = QgsRuleBasedLabeling.Rule(settings, maximumScale=1, minimumScale=1000000)
        # rule.setDescription('KP5')
        # rule.setFilterExpression('cngmeters % 5000 = 0')
        # rule2 = QgsRuleBasedLabeling.Rule(settings, maximumScale=1, minimumScale=50000)
        # rule2.setDescription('KP05')
        # rule2.setFilterExpression('cngmeters % 500 = 0')
        #
        # root.appendChild(rule)
        # root.appendChild(rule2)
        #
        # # Apply label configuration
        # rules = QgsRuleBasedLabeling(root)
        # # rpl_kp_pnt_layer.setCustomProperty("labeling/enabled", "true")
        # rpl_kp_pnt_layer.setLabeling(rules)
        # rpl_kp_pnt_layer.triggerRepaint()
        # # Apply label configuration
        # rpl_kp_pnt_layer.setLabelsEnabled(True)
        #
        # rpl_kp_pnt_layer.loadNamedStyle(
        #     os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'RPL_line_direction.qml'))
        #
        """
        Set Visible Layers
        """
        node = QgsProject.instance().layerTreeRoot().findLayer(original_points_layer)
        if node:
            node.setItemVisibilityChecked(False)

        node2 = QgsProject.instance().layerTreeRoot().findLayer(original_line_layer)
        if node2:
            node2.setItemVisibilityChecked(True)

        print("Sucessfully added Eiva ETR Track to proj: " + str(track_name))

    def add_waypoints_to_proj(self, df, epsg_code, name):
        PointList = []
        point_dist = []
        point_dist_tot = []

        # Original Point Layer
        param1 = "Point?crs=%s&field=id:integer&index=yes" % (str(epsg_code))
        original_points_layer = self.iface.addVectorLayer(param1, str(name) + '_Points',
                                                     'memory')

        # Point feature for Original Point Layer
        point_feature = QgsFeature()

        pr = original_points_layer.dataProvider()
        original_points_layer.startEditing()
        cnt = 0
        for col in df.columns:
            if cnt == (0 or 7 or 10 or 12):
                pr.addAttributes([QgsField(str(col), QVariant.String)])
            else:
                pr.addAttributes([QgsField(str(col), QVariant.Double)])
            cnt = cnt + 1
        original_points_layer.updateFields()

        for index, row in df.iterrows():
            position_points = QgsPointXY(float(row['Easting']), float(row['Northing']))

            PointList.append(position_points)
            if index == 0:
                point_dist.append(0)
                point_dist_tot.append(0)
            else:
                point_dist.append(PointList[index].distance(PointList[index - 1]))
                point_dist_tot.append(point_dist_tot[index - 1] + PointList[index].distance(PointList[index - 1]))

            attributes_list = row.tolist()
            attributes_list.insert(0, index)
            point_feature.setAttributes(attributes_list)

            point_feature.setGeometry(QgsGeometry.fromPointXY(position_points))
            pr.addFeatures([point_feature])

        # Update project
        original_points_layer.updateExtents()
        original_points_layer.commitChanges()

        # Add single labels
        pal_layer = QgsPalLayerSettings()
        pal_layer.fieldName = 'Name'
        pal_layer.enabled = True
        pal_layer.placement = QgsPalLayerSettings.Line
        labels = QgsVectorLayerSimpleLabeling(pal_layer)
        original_points_layer.setLabeling(labels)
        original_points_layer.setLabelsEnabled(True)
        original_points_layer.triggerRepaint()

        """
        Set Visible Layers
        """
        node = QgsProject.instance().layerTreeRoot().findLayer(original_points_layer)
        if node:
            node.setItemVisibilityChecked(True)

    def run_importEiva(self):
        print("Running EIVA import")
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.eiva_first_start:
            self.eiva_first_start = False
            self.eiva_dlg = loadEivaDialog()

        # show the dialog
        self.eiva_dlg.show()
        # Run the dialog event loop
        result = self.eiva_dlg.exec_()

        self.eiva_dlg.open_folder.clicked.connect(self.open_select_eiva)
        self.eiva_dlg.cB_EPSG.clicked.connect(self.handle_QGIS_Project_EPSG_eiva)

        if self.eiva_dlg.cB_EPSG.isChecked():
            epsg_code = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
        else:
            epsg_code = self.eiva_dlg.sB_epsg.value()
            if epsg_code == 11111:
                epsg_code = ''
            else:
                epsg_code = "EPSG:" + str(epsg_code)

        if result:
            #Get EIVA file from GUI
            eiva_file = self.eiva_dlg.path_eiva_file.value()
            filename, file_extension = os.path.splitext(eiva_file)
            # basename = os.path.basename(runline_file)
            # self.runline_dlg.layer_name.setValue(basename)
            if not os.path.exists(eiva_file):
                QMessageBox.critical(self.iface.mainWindow(),
                                     'Read EIVA file',
                                     "Could not find EIVA file. File does not exist?\nExiting...")
                return
            if file_extension == '.rln' or file_extension == '.RLN' or file_extension == '.rlx' or file_extension == '.RLX':
                n_start_rows = []
                n_end_rows = []
                runline_name = []
                with open(eiva_file, "r") as myfile:
                    for cnt, line in enumerate(myfile):
                        if cnt == 0:
                            # print("first line")
                            first_line = line
                        elif cnt == 1:
                            # print("second line")
                            second_line = line
                            if first_line[0] == '#' and second_line[0] == '"':
                                n_start_rows.append(cnt+1)
                                runline_name.append(line.replace('\n', '').replace('"', ''))
                            elif first_line[0] == '#' and second_line[0] != '"':
                                n_start_rows.append(cnt)
                                runline_name.append(str(self.eiva_dlg.layer_name.value()))
                                # runline_name.append(first_line.replace('\n', '').replace('"', '').replace('#', 'TimeName'))
                            elif first_line[0] == '"':
                                n_start_rows.append(cnt)
                                runline_name.append(first_line.replace('\n', '').replace('"', ''))
                            elif first_line[0] != '"' and first_line[0] != '#' and second_line[0] != '#' and second_line[0] != '"':
                                n_start_rows.append(cnt-1)
                                runline_name.append(str(self.eiva_dlg.layer_name.value()))
                        else:
                            if line[0] == '"':
                                n_start_rows.append(cnt+1)
                                runline_name.append(line.replace('\n', '').replace('"', ''))
                            if line[0] == '\n':
                                n_end_rows.append(cnt)

                    n_end_rows.append(cnt+1)

                myfile.close()
                # print(n_start_rows)
                # print(n_end_rows)
                # print(str(len(runline_name)) + " Runline(s) in file")
                # print(runline_name)

                if file_extension == '.rln' or file_extension == '.RLN':
                    for i, run_name in enumerate(runline_name):
                        print("Adding runline name: " + str(run_name))
                        df_seg = pd.read_csv(eiva_file, sep=' |;', skiprows=n_start_rows[i], nrows=n_end_rows[i]-n_start_rows[i], skip_blank_lines=True, comment='#', names=['eastings', 'northings', 'kp'], engine='python')
                        # print(df_seg)
                        self.add_runline_to_proj(df_seg, epsg_code, run_name)

                elif file_extension == '.rlx' or file_extension == '.RLX':
                    """For RLX files remove extra columns in name"""
                    runline_name = [w.split(';', 1)[0] for w in runline_name]

                    for i, run_name in enumerate(runline_name):
                        print("Adding runline name: " + str(run_name))
                        # TODO: Might change RLX import to read in all information like eastings/northings end, kp end, and param 1-3
                        df_seg = pd.read_csv(eiva_file, sep=';', skiprows=n_start_rows[i], nrows=n_end_rows[i]-n_start_rows[i], skip_blank_lines=True, comment='#', names=['eastings', 'northings', 'eastings_end', 'northings_end','kp','kp_end', 'param1', 'param2', 'param3'], engine='python')
                        # print(df_seg)
                        self.add_runline_to_proj(df_seg, epsg_code, run_name)

                self.iface.zoomToActiveLayer()


                #QgsProject.instance().addMapLayers([rpl_points_layer])  # 3 correction
                # vectorLyr = QgsVectorLayer('pyqgis_data/nyc/NYC_MUSEUMS_GEO.shp', 'Museums', "ogr")
                # n_features = vectorLyr.featureCount()  # added line
                # vpr = vectorLyr.dataProvider()
                # pnt = QgsGeometry.fromPoint(QgsPoint(-74.80, 40.549))
                # f = QgsFeature()
                # f.setGeometry(pnt)
                # f.setAttributes([n_features])  # added line
                # vpr.addFeatures([f])
                # vectorLyr.updateExtents()


                print("Finished Loading Runline file")

            elif file_extension == '.etr' or file_extension == '.ETR':
                print("Importing ETR file")
                df_etr = pd.read_csv(eiva_file, sep=' ', skip_blank_lines=True, comment='#', header=0, engine='python')
                self.add_etr_track_to_proj(df_etr, epsg_code, str(self.eiva_dlg.layer_name.value()))
                print("Finished importing ETR file")

            elif file_extension == ('.wpt' or '.WPT'):
                print("Importing WPT file")
                df = pd.read_csv(eiva_file, sep=',', skip_blank_lines=True, comment='#', names=['Name', 'Easting', 'Northing', 'Depth'], engine='python')
                self.add_waypoints_to_proj(df, epsg_code, str(self.eiva_dlg.layer_name.value()))
                print("Finished importing ETR file")

            elif file_extension == ('.wp2' or '.WP2'):
                print("Importing WP2 file")
                df = pd.read_csv(eiva_file, sep=';', skip_blank_lines=True, comment='#', names=['Name', 'Easting', 'Northing', 'Depth', 'param1', 'param2', 'param3', 'param4', 'param5', 'param6', 'param7', 'param8', 'param9', 'param10', 'param11', 'param12', 'param13', 'param14', 'param15'], engine='python')
                self.add_waypoints_to_proj(df, epsg_code, str(self.eiva_dlg.layer_name.value()))
                print("Finished importing ETR file")

            # elif file_extension == '.wp2':
            #     print("Importing wp2 file")

            else:
                err_text = "File Format: " + str(file_extension) +  " is NOT supported. CURRENTLY SUPPORTED FORMATS: RLN, RLX, ETR, WP2 and WPT \nExiting..."
                print(err_text)
                QMessageBox.critical(self.iface.mainWindow(),
                                     'Read EIVA file',
                                     str(err_text))

    def create_categorized_layers(self, r_layer, id_attr):
        id_attr = str(id_attr)
        # get unique values
        fni = r_layer.fields().indexFromName(id_attr)
        unique_ids = r_layer.dataProvider().uniqueValues(fni)
        QgsMessageLog.logMessage("sstyle for run layer..." + str(unique_ids))
        # define categories
        categories = []
        for unique_id in unique_ids:
            # initialize the default symbol for this geometry type
            symbol = QgsSymbol.defaultSymbol(r_layer.geometryType())
            symbol.setOpacity(0.5)

            layer_style={}
            layer_style['color'] = '%d, %d, %d' % (randrange(0, 256), randrange(0, 256), randrange(0, 256))
            layer_style['outline'] = '#000000'
            symbolLayer = QgsSimpleFillSymbolLayer.create(layer_style)
            if symbolLayer is not None:
                symbol.changeSymbolLayer(0, symbolLayer)
            category = QgsRendererCategory(unique_id, symbol, str(unique_id))
            categories.append(category)

            renderer = QgsCategorizedSymbolRenderer(id_attr, categories)
            # assign the created renderer to the layer
            if renderer is not None:
                r_layer.setRenderer(renderer)
            r_layer.triggerRepaint()

    # def run_importRunline(self):
    #     print("Running Runline import")
    #     """Run method that performs all the real work"""
    #
    #     # Create the dialog with elements (after translation) and keep reference
    #     # Only create GUI ONCE in callback, so that it will only load when the plugin is started
    #     if self.runline_first_start:
    #         self.runline_first_start = False
    #         self.runline_dlg = loadRunlineDialog()
    #
    #     # show the dialog
    #     self.runline_dlg.show()
    #     # Run the dialog event loop
    #     result = self.runline_dlg.exec_()
    #
    #     self.runline_dlg.open_folder.clicked.connect(self.open_select_runline)
    #
    #     if result:
    #         # Get crs for current project
    #         crsId = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
    #         #crsId = "EPSG=32633"
    #         #print(crsId)
    #         #Get runline file from GUI
    #         runline_file = self.runline_dlg.path_rln_rlx.value()
    #         filename, file_extension = os.path.splitext(runline_file)
    #         #basename = os.path.basename(runline_file)
    #         #self.runline_dlg.layer_name.setValue(basename)
    #         if not os.path.exists(runline_file):
    #             QMessageBox.critical(self.iface.mainWindow(),
    #                                  'Read Runline file',
    #                                  "Could not find Runline file. Runline file does not exist?\nExiting...")
    #             return
    #         if file_extension == '.rln':
    #             print("Importing RLN file")
    #             df_runline = pd.read_csv(runline_file, sep=';', skiprows=2, header=None)
    #             df_runline.columns = ['eastings', 'northings']
    #             print(df_runline.head())
    #             # Point list for the runline
    #             PointList = []
    #             point_dist = []
    #             point_dist_tot = []
    #             # Point Layer for Runline
    #             #param1 = 'Point?crs=' + str(crsId) + "&field=id:integer&field1=id2:str&field2=text2:str&field3=text3:str&field4=text4:str&text5=id5:str&index=yes"
    #             param1 = 'Point?crs=' + str(
    #                 crsId) + "&field=id:integer&index=yes"
    #             #param2 = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s" % (
    #             #"UTF-8", ",", "easting", "northing")
    #             #param3 = 'Point?crs=' + str(crsId) + "&field=id:integer&index=yes"
    #             point_layer = self.iface.addVectorLayer(param1, 'Point_' + str(self.runline_dlg.layer_name.value()), 'memory')
    #
    #             #fields = point_layer.pendingFields()
    #             # Point feature for runline
    #             point_feature = QgsFeature()
    #
    #             pr = point_layer.dataProvider()
    #             print(pr.fields().count())
    #             point_layer.startEditing()
    #             #pr.addAttributes([QgsField("Index", QVariant.Int)])
    #             pr.addAttributes([QgsField("Eastings", QVariant.Double)])
    #             pr.addAttributes([QgsField("Northings", QVariant.Double)])
    #             pr.addAttributes([QgsField("SegmentLength[m]", QVariant.Double)])
    #             pr.addAttributes([QgsField("RunlineLength[KP]", QVariant.Double)])
    #             point_layer.updateFields()
    #             print(pr.fields().count())
    #             # point_feature.setAttributes([1])
    #
    #             for index, row in df_runline.iterrows():
    #                 runline_points = QgsPointXY(float(row['eastings']), float(row['northings']))
    #
    #                 PointList.append(runline_points)
    #                 if index == 0:
    #                     point_dist.append(0)
    #                     point_dist_tot.append(0)
    #                 else:
    #                     point_dist.append(PointList[index].distance(PointList[index-1]))
    #                     point_dist_tot.append(point_dist_tot[index - 1] + PointList[index].distance(PointList[index - 1]))
    #
    #                 point_feature.setAttributes([index, float(row['eastings']), float(row['eastings']), point_dist[index], point_dist_tot[index]/1000])
    #                 point_feature.setGeometry(QgsGeometry.fromPointXY(runline_points))
    #                 #point_feature.setAttributes(["test"])
    #                 pr.addFeatures([point_feature])
    #                 #point_feature.setAttribute(1, "text1")
    #
    #             # Specify the geometry type
    #             point_layer.updateExtents()
    #             point_layer.commitChanges()
    #
    #             #pr.addFeatures([point_feature])
    #             linea = self.iface.addVectorLayer("LineString?crs=" + str(crsId) + "&field=id:integer&index=yes", "Line_" + str(self.runline_dlg.layer_name.value()), "memory")
    #             linea.startEditing()
    #             feature = QgsFeature()
    #             feature.setGeometry(QgsGeometry.fromPolylineXY(PointList))
    #             feature.setAttributes([1])
    #             linea.addFeature(feature)
    #             linea.commitChanges()
    #             self.iface.zoomToActiveLayer()
    #
    #
    #             #QgsProject.instance().addMapLayers([point_layer])  # 3 correction
    #             # vectorLyr = QgsVectorLayer('pyqgis_data/nyc/NYC_MUSEUMS_GEO.shp', 'Museums', "ogr")
    #             # n_features = vectorLyr.featureCount()  # added line
    #             # vpr = vectorLyr.dataProvider()
    #             # pnt = QgsGeometry.fromPoint(QgsPoint(-74.80, 40.549))
    #             # f = QgsFeature()
    #             # f.setGeometry(pnt)
    #             # f.setAttributes([n_features])  # added line
    #             # vpr.addFeatures([f])
    #             # vectorLyr.updateExtents()
    #
    #
    #             print("Finished Loading RLN file")
    #         elif file_extension == '.rlx':
    #             print("Importing RLX file")
    #
    #         elif file_extension == '.wp2':
    #             print("Importing wp2 file")
    #
    #         else:
    #             print("Can Only import RLN and RLX files at the moment")
    #             QMessageBox.critical(self.iface.mainWindow(),
    #                                  'Read Runline file',
    #                                  "Could not read file extention: " + str(file_extension) + ". Only RLX and RLN is compatible?\nExiting...")

    # def run_importTrack(self):
    #     print("Running Track import")
    #     """Run method that performs all the real work"""
    #
    #     # Create the dialog with elements (after translation) and keep reference
    #     # Only create GUI ONCE in callback, so that it will only load when the plugin is started
    #     if self.track_first_start == True:
    #         self.track_first_start = False
    #         self.track_dlg = loadTrackDialog()
    #
    #     # show the dialog
    #     self.track_dlg.show()
    #     # Run the dialog event loop
    #     result = self.track_dlg.exec_()
    #
    #     self.track_dlg.open_folder.clicked.connect(self.open_select_etr)
    #
    #     if result:
    #         track_file = self.track_dlg.path_etr.value()
    #         filename, file_extension = os.path.splitext(track_file)
    #         if not os.path.exists(track_file):
    #             QMessageBox.critical(self.iface.mainWindow(),
    #                                  'Read Track file',
    #                                  "Could not find Track file. Track file does not exist?\nExiting...")
    #             return
    #         if file_extension == '.etr':
    #             print("Importing ETR file")
    #         else:
    #             print("Can Only import ETR files at the moment")
    #             QMessageBox.critical(self.iface.mainWindow(),
    #                                  'Read Track file',
    #                                  "Could not read file extention: " + str(
    #                                      file_extension) + ". Only ETRN is compatible?\nExiting...")

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = iSurveyToolsDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        self.dlg.pB_Browse.clicked.connect(self.openSelectDB)
        self.dlg.pB_Validate.clicked.connect(self.validateMasterfile)
        self.dlg.pB_Refresh_tid_sid.clicked.connect(self.populate_tid_and_sid_list)
        self.dlg.cB_EPSG.clicked.connect(self.handle_QGIS_Project_EPSG)

        if self.dlg.cB_EPSG.isChecked():
            epsg_code = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
        else:
            epsg_code = self.dlg.sB_epsg.value()
            if epsg_code == 11111:
                epsg_code = ''
            else:
                epsg_code = "EPSG:" + str(epsg_code)

        # Create a New project
        #pathQGS = "NewProject.qgs"
        project = QgsProject.instance()
        #project.setFileName(pathQGS)
        # See if OK was pressed
        if result:
            conn = self.initDBConnection()
            if self.dlg.cB_runline.isChecked():
                print("Start Importing Runline")
                sql_query_rpl = 'SELECT * FROM rpl ORDER BY kp ASC;'
                df_rpl = pd.read_sql(sql_query_rpl, conn)
                if df_rpl.empty:
                    QMessageBox.critical(self.iface.mainWindow(),
                                         'Import Runline error',
                                         "Seems like the Runline table in the Masterfile is empty \nExiting...")
                    return
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_RPL_table.csv'
                    df_rpl.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing", str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF Runline", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)

                    """
                                       Adding line feature based on the points, qgis:pointstopath
                                       2020-02-08 kele 
                                       """
                    if self.dlg.cB_runline_lin.isChecked():
                        print('Creating Runline line feature')
                        layer = iface.activeLayer()
                        print('Selected Layer name is {}'.format(layer.name()))
                        alg_params = {
                            'DATE_FORMAT': '',
                            'INPUT': layer,
                            'ORDER_FIELD': 'kp',
                            'GROUP_FIELD': '',  # no grouping on runline
                            'OUTPUT': 'TEMPORARY_OUTPUT'  # temporary layer
                        }
                        result = processing.run('qgis:pointstopath', alg_params)
                        # TODO:add a tst too see if the process was a success
                        # if not result.isValid():  -does not work as isValid does not work for dictionaries
                        # print('processing failed')
                        QgsProject.instance().addMapLayer(result['OUTPUT'])  # showing layer on
                        layer = iface.activeLayer()
                        print('success generating path from {} with the following output name: {}'.format(layer.name(),
                                                                                                          result[
                                                                                                              'OUTPUT'].name()))
                        layer.setName('MF Runline_Line')  # renaming layer
                        layer.loadNamedStyle(
                            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'RPL_line_direction.qml'))

                        # Create different colors for categorized layers
                        # self.create_categorized_layers(layer, "kp")
                        """
                        Set Visible Layers
                        """
                        node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                        if node:
                            node.setItemVisibilityChecked(False)

                    self.iface.zoomToActiveLayer()
                    QMessageBox.information(self.iface.mainWindow(),
                                         'Sucessfully Imported Runline',
                                         "Sucessfully imported Runline as layer: \n MasterFile_Runline")

            if self.dlg.cB_aslaid.isChecked():
                print("Start Importing As-Laid")
                sql_query_as_laid = 'SELECT * FROM as_laid ORDER BY kp ASC;'
                df_as_laid = pd.read_sql(sql_query_as_laid, conn)
                if df_as_laid.empty:
                    QMessageBox.critical(self.iface.mainWindow(),
                                         'Import As-Laid error',
                                         "Seems like the As-Laid table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_AL_table.csv'
                    df_as_laid.to_csv(name_csv, index=False)
                    #df_rpl.to_csv("C:\\temp\\test0101.csv", index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing", str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF As-Laid", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)
                    QMessageBox.information(self.iface.mainWindow(),
                                         'Sucessfully Imported As-Laid',
                                         "Sucessfully imported As-Laid as layer: \n MasterFileAs-Laid")

                    """
                    Adding line feature based on the points, qgis:pointstopath
                    2020-02-08 kele 
                    """
                    if self.dlg.cB_aslaid_lin.isChecked():
                        print('Creating as-laid line feature')
                        layer = iface.activeLayer()
                        print('Selected Layer name is {}'.format(layer.name()))
                        alg_params = {
                             'DATE_FORMAT': '',
                             'INPUT': layer,
                             'ORDER_FIELD': 'kp',
                             'GROUP_FIELD': '',     # no grouping on as-laid
                             'OUTPUT': 'TEMPORARY_OUTPUT'   # temporary layer
                        }
                        result = processing.run('qgis:pointstopath', alg_params)
                        # TODO:add a test to see if the process was a success
                        # if not result.isValid():  -does not work as isValid does not work for dictionaries
                        # print('processing failed')
                        QgsProject.instance().addMapLayer(result['OUTPUT']) # showing layer on
                        layer = iface.activeLayer()
                        print('success generating path from {} with the following output name: {}'.format(layer.name(),
                                                                                              result['OUTPUT'].name()))
                        layer = iface.activeLayer()
                        layer.setName('MF As-Laid_Line')     # renaming layer

            if self.dlg.cB_capjet.isChecked():
                print("Start Capjet Track")
                sql_query_capjet_track = 'SELECT * FROM trenching;'
                df_capjet_track = pd.read_sql(sql_query_capjet_track, conn)
                if df_capjet_track.empty:
                    QMessageBox.critical(self.iface.mainWindow(),
                                         'Import Capjet Track error',
                                         "Seems like the Capjet Track table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_CJ_track_table.csv'
                    df_capjet_track.to_csv(name_csv, index=False)
                    # df_rpl.to_csv("C:\\temp\\test0101.csv", index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing",str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF Trencher Track", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)


                    """
                    Adding line feature based on the points, qgis:pointstopath
                    2020-02-08 kele 
                    """
                    if self.dlg.cB_capjet_lin.isChecked():
                        print('Creating capjet track line feature')
                        layer = iface.activeLayer()
                        print('Selected Layer name is {}'.format(layer.name()))
                        alg_params = {
                             'DATE_FORMAT': '',
                             'INPUT': layer,
                             'ORDER_FIELD': 'kp',
                             'GROUP_FIELD': 'trenching_id',     # no grouping on as-laid
                             'OUTPUT': 'TEMPORARY_OUTPUT'   # temporary layer
                        }
                        result = processing.run('qgis:pointstopath', alg_params )
                        # TODO:add a tst too see if the process was a success
                        # if not result.isValid():  -does not work as isValid does not work for dictionaries
                        # print('processing failed')
                        QgsProject.instance().addMapLayer(result['OUTPUT']) # showing layer on
                        layer = iface.activeLayer()
                        print('success generating path from {} with the following output name: {}'.format(layer.name(),
                                                                                              result['OUTPUT'].name()))
                        layer.setName('MF Trencher Track_Line')     # renaming layer
                        layer.loadNamedStyle(
                            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'TID_trenched.qml'))

                        # Create different colors for categorized layers
                        self.create_categorized_layers(layer, "trenching_id")
                        """
                        Set Visible Layers
                        """
                        node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                        if node:
                            node.setItemVisibilityChecked(False)
                        self.iface.zoomToActiveLayer()
                    QMessageBox.information(self.iface.mainWindow(),
                                            'Sucessfully Imported Trencher Track',
                                            "Sucessfully imported Trencher Track as layer: \n MF Trencher Track")

            if self.dlg.cB_astrenched.isChecked():
                print("Start Importing As-Trenched")
                sql_query_as_trenched = 'SELECT * FROM as_trenched;'
                df_as_trenched = pd.read_sql(sql_query_as_trenched, conn)
                if  df_as_trenched.empty:
                    QMessageBox.critical(self.iface.mainWindow(),
                                         'Import As-Trenched error',
                                         "Seems like the As-Trenched table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_AT_table.csv'
                    df_as_trenched.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing", str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF AT-X Pipe Pos", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)

                    """
                    Adding line feature based on the points, qgis:pointstopath
                    2020-02-08 kele 
                    """
                    if self.dlg.cB_astrenched_lin.isChecked():
                        print('Creating as-trenched line feature')
                        layer = iface.activeLayer()
                        print('Selected Layer name is {}'.format(layer.name()))
                        alg_params = {
                             'DATE_FORMAT': '',
                             'INPUT': layer,
                             'ORDER_FIELD': 'kp',
                             'GROUP_FIELD': 'sid_id',     # grouping on SID ID
                             'OUTPUT': 'TEMPORARY_OUTPUT'   # temporary layer, Path given name
                        }

                        result = processing.run('qgis:pointstopath', alg_params)
                        QgsProject.instance().addMapLayer(result['OUTPUT'])  # showing layer on
                        layer = iface.activeLayer()
                        print('success generating path from {} with the following output name: {}'.format(layer.name(),
                                                                                              result['OUTPUT'].name()))
                        layer = iface.activeLayer()
                        layer.setName('MF AT-X Pipe Pos_Line')     # renaming layer
                        layer.loadNamedStyle(
                            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'SID_as-trenched.qml'))

                        # Create different colors for categorized layers
                        self.create_categorized_layers(layer, "sid_id")
                        """
                        Set Visible Layers
                        """
                        node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                        if node:
                            node.setItemVisibilityChecked(False)
                        self.iface.zoomToActiveLayer()

                    QMessageBox.information(self.iface.mainWindow(),
                                            'Sucessfully Imported As-Trenched Pipe Pos',
                                            "Sucessfully imported As-Trenched Pipe Pos as layer: \n MasterFile As-Trenched Pipe Pos")

            if self.dlg.cB_events.isChecked():
                print("Start Importing Events")
                sql_query_events = 'SELECT * FROM events;'
                df_events = pd.read_sql(sql_query_events, conn)
                if df_events.empty:
                    QMessageBox.critical(self.iface.mainWindow(),
                                         'Import Event error',
                                         "Seems like the Event table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_events_table.csv'
                    df_events.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing",str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF Events", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)
                    mylayer.loadNamedStyle(os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'MF_events.qml'))
                    mylayer.triggerRepaint()
                    mylayer.setLabelsEnabled(True)



                    QMessageBox.information(self.iface.mainWindow(),
                                         'Sucessfully Imported Events',
                                         "Sucessfully imported Events as layer: \n MasterFile Events")

            if self.dlg.cB_capjet_tid.isChecked():
                print("Start Capjet Track TID")
                print(self.dlg.comboBox_TID.currentText())
                tid_nr = float(str(self.dlg.comboBox_TID.currentText()))
                print(tid_nr)
                sql_query_capjet_track = 'SELECT * FROM trenching WHERE trenching_id =' + str(tid_nr) + ';'
                df_capjet_track = pd.read_sql(sql_query_capjet_track, conn)
                if df_capjet_track.empty:
                    QMessageBox.critical(self.iface.mainWindow(),
                                         'Import Capjet Track error',
                                         "Seems like the Capjet Track table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_TID_table.csv'
                    df_capjet_track.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing",str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "TID:%s Trencher Track" % str(tid_nr), "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)

                    """
                    Add TID Track as line layer also
                    """
                    print('Creating TID Track as line layer also')
                    alg_params = {
                        'DATE_FORMAT': '',
                        'INPUT': mylayer,
                        'ORDER_FIELD': 'kp',
                        'GROUP_FIELD': 'trenching_id',  # no grouping on as-laid
                        'OUTPUT': 'TEMPORARY_OUTPUT'  # temporary layer
                    }
                    result = processing.run('qgis:pointstopath', alg_params)
                    # TODO:add a tst too see if the process was a success
                    # if not result.isValid():  -does not work as isValid does not work for dictionaries
                    # print('processing failed')
                    tid_line_layer = QgsProject.instance().addMapLayer(result['OUTPUT'])  # showing layer on
                    print('success generating path from {} with the following output name: {}'.format(
                        tid_line_layer.name(),
                        result[
                            'OUTPUT'].name()))
                    tid_line_layer.setName("TID%s Trencher Track_Line" % str(tid_nr))  # renaming layer
                    tid_line_layer.loadNamedStyle(
                        os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'TID_trenched.qml'))
                    """
                    Set Visible Layers
                    """
                    node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                    if node:
                        node.setItemVisibilityChecked(False)
                    self.iface.zoomToActiveLayer()

                    QMessageBox.information(self.iface.mainWindow(),
                                            'Sucessfully Imported Trencher Track TID' + str(tid_nr),
                                            "Sucessfully imported Trencher Track as layer: \n TID%s Trencher Track_Line" % str(tid_nr))

            if self.dlg.cB_astrenched_sid.isChecked():
                print("Start Importing As-Trenched")
                print(self.dlg.comboBox_SID.currentText())
                sid_nr = float(str(self.dlg.comboBox_SID.currentText()))
                print(sid_nr)
                sql_query_as_trenched = 'SELECT * FROM as_trenched WHERE sid_id=' + str(sid_nr) + ';'
                df_as_trenched = pd.read_sql(sql_query_as_trenched, conn)
                if df_as_trenched.empty:
                    QMessageBox.critical(self.iface.mainWindow(),
                                         'Import As-Trenched error',
                                         "Seems like the As-Trenched table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_SID_table.csv'
                    df_as_trenched.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing",str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "SID%s AT-X Pipe Pos" % str(sid_nr), "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)

                    """
                    Add SID AT Track as line layer also
                    """
                    print('Creating SID AT Track as line layer also')
                    alg_params = {
                        'DATE_FORMAT': '',
                        'INPUT': mylayer,
                        'ORDER_FIELD': 'kp',
                        'GROUP_FIELD': 'sid_id',  # no grouping on as-laid
                        'OUTPUT': 'TEMPORARY_OUTPUT'  # temporary layer
                    }
                    result = processing.run('qgis:pointstopath', alg_params)
                    # TODO:add a tst too see if the process was a success
                    # if not result.isValid():  -does not work as isValid does not work for dictionaries
                    # print('processing failed')
                    at_line_layer = QgsProject.instance().addMapLayer(result['OUTPUT'])  # showing layer on
                    print('success generating path from {} with the following output name: {}'.format(at_line_layer.name(),
                                                                                                      result[
                                                                                                          'OUTPUT'].name()))
                    at_line_layer.setName("SID%s AT-X Pipe Pos_Line" % str(sid_nr))  # renaming layer
                    at_line_layer.loadNamedStyle(os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'SID_as-trenched.qml'))
                    """
                    Set Visible Layers
                    """
                    node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                    if node:
                        node.setItemVisibilityChecked(False)
                    self.iface.zoomToActiveLayer()
                    QMessageBox.information(self.iface.mainWindow(),
                                            'Sucessfully Imported',
                                            "Sucessfully imported As-Trenched Pipe Pos as layer: \n SID%s AT-X Pipe Pos_Line" % str(sid_nr))

            print("Finished Program")
