# -*- coding: utf-8 -*-
"""
/***************************************************************************
 iSurveyTools
                                 A QGIS plugin
 This plugin is a tool to easier import data from iSurveys Masterfile
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-01-16
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Daniel Sk√•re
        email                : dags@isurvey-group.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction
from qgis.utils import iface # 2020-02-09 kele
import csv
# Import necessary geometric objects from shapely module
#from shapely.geometry import Point, LineString
from datetime import datetime
import subprocess
import sqlite3, sys
import pandas as pd
from osgeo import gdal
from qgis.core import QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsExpressionContextUtils, QgsWkbTypes, QgsRasterShader, QgsRasterLayer, QgsColorRampShader, QgsSingleBandPseudoColorRenderer, Qgis, QgsVectorLayer, QgsVectorFileWriter, QgsProject, QgsPoint, QgsFeature, QgsGeometry, QgsPointXY, QgsField, QgsPalLayerSettings, QgsTextFormat, QgsRuleBasedLabeling, QgsMessageLog, QgsSymbol, QgsRendererCategory, QgsSimpleFillSymbolLayer, QgsCategorizedSymbolRenderer, QgsVectorLayerSimpleLabeling
from urllib.request import pathname2url
from os import path
from pathlib import Path
from qchainage import chainagetool
from random import randrange
import numpy as np
import processing   # make it possible to use the processing toolbox functions like "point to path"
import requests

from PyQt5.QtWidgets import QAction, QMessageBox, QFileDialog
# from qgis.core import (QgsCoordinateReferenceSystem,
#                        QgsCoordinateTransform,
#                        QgsProject,
#                        QgsRectangle,
#                        QgsPointXY,
#                        QgsGeometry,
#                        QgsVectorLayer,
#                        QgsFeature)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .isurvey_tools_dialog import iSurveyToolsDialog, loadEivaDialog, loadExportDialog
import os.path
MESSAGE_CATEGORY = 'iSurvey Toolbox'

class iSurveyTools:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'iSurveyTools_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&iSurvey Tools')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.eiva_first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('iSurveyTools', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/isurvey_tools/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import from Masterfile'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Create second Icon
        icon_path = ':/plugins/isurvey_tools/icon_rln.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import EIVA Feature'),
            callback=self.run_importEiva,
            parent=self.iface.mainWindow())

        # Create third Icon
        icon_path = ':/plugins/isurvey_tools/icon_export.png'
        self.add_action(
            icon_path,
            text=self.tr(u'*Export Feature'),
            callback=self.run_exportDialog,
            parent=self.iface.mainWindow())

        # # Create third Icon
        # icon_path = ':/plugins/isurvey_tools/icon_etr.png'
        # self.add_action(
        #     icon_path,
        #     text=self.tr(u'Import E-Track'),
        #     callback=self.run_importTrack,
        #     parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.eiva_first_start = True
        self.export_first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&iSurvey Tools'),
                action)
            self.iface.removeToolBarIcon(action)

    def openSelectDB(self):
        # dbFile,_ = QFileDialog.getOpenFileName(self, 'Open DB file', 'c:\\', "SQL Lite DB (*.db *.db3)")
        dbFile,_ = QFileDialog.getOpenFileName(self.dlg, "Open Masterfile", "", "SQLite (*.sqlite *.sqlite3);;SQLite DB (*.db *.db3);;All Files (*)")
        if dbFile:
            self.dlg.line_db_path.setText(os.path.abspath(dbFile))
            self.populate_tid_and_sid_list()
            QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(), 'project_masterfile_fp',
                                                         os.path.abspath(dbFile))
            QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(), 'project_masterfile_path',
                                                         os.path.abspath(os.path.dirname(dbFile)))
            # self.validateMasterfile()

    def open_select_eiva(self):
        File,_ = QFileDialog.getOpenFileName(self.eiva_dlg, "Open EIVA files", "", "Runlines (*.rln *.rlx);;Track (*.etr);;Waypoints (*.wpt *.wp2);;XYZ Files (*.xyz);;All Files (*)")
        # self.eiva_dlg
        if File:
            self.eiva_dlg.path_eiva_file.setText(os.path.abspath(File))
            basename = os.path.basename(os.path.abspath(File))
            # Set filename to Layername in GUI
            self.eiva_dlg.layer_name.setValue(basename)

    def open_select_export_folder(self):
        myDir = QFileDialog.getExistingDirectory(self.export_dlg, "Open Directory to export to")
        # QFileDialog.getOpenFileUrl()
        # self.eiva_dlg
        if myDir:
            self.export_dlg.export_path.setText(os.path.abspath(myDir))
            # basename = os.path.basename(os.path.abspath(File))
            # Set filename to Layername in GUI
            # self.export_dlg.layer_name.setValue(basename)

    def close_master_file_connect_signals(self):
        self.dlg.pB_Browse.clicked.disconnect(self.openSelectDB)
        self.dlg.pB_Validate.clicked.disconnect(self.validateMasterfile)
        self.dlg.pB_Refresh_tid_sid.clicked.disconnect(self.populate_tid_and_sid_list)
        self.dlg.cB_EPSG.clicked.disconnect(self.handle_QGIS_Project_EPSG)

    def handle_QGIS_Project_EPSG(self):
        if self.dlg.cB_EPSG.isChecked():
            self.dlg.label_epsg.hide()
            self.dlg.sB_epsg.hide()
        elif not self.dlg.cB_EPSG.isChecked():
            self.dlg.label_epsg.show()
            self.dlg.sB_epsg.show()

    def handle_QGIS_Project_EPSG_eiva(self):
        if self.eiva_dlg.cB_EPSG.isChecked():
            self.eiva_dlg.label_epsg.hide()
            self.eiva_dlg.sB_epsg.hide()
        elif not self.eiva_dlg.cB_EPSG.isChecked():
            self.eiva_dlg.label_epsg.show()
            self.eiva_dlg.sB_epsg.show()

    def initDBConnection(self):
        master_file_path = self.dlg.line_db_path.value()
        if path.exists(master_file_path):
            # print("File exists")
            QgsMessageLog.logMessage('Masterfile exists "{master_file_path}"'.format(
                master_file_path=master_file_path),
                MESSAGE_CATEGORY, Qgis.Info)
            dburi = 'file:{}?mode=rw'.format(pathname2url(master_file_path))
            try:
                conn = sqlite3.connect(dburi, uri=True)
            except sqlite3.OperationalError:
                dburi = 'file:{}?mode=rwc'.format(pathname2url(master_file_path))
                try:
                    conn = sqlite3.connect(dburi, uri=True)
                except:
                    print("Unexpected error:" + str(sys.exc_info()[0]))
                err2 = "Database: " + str(master_file_path) + " does not exist and will be created. Continue..."
                print(err2)
            if conn is None:
                msg = "Cant't connect to Masterfile. Is some other program connected to it and blocking it? Exiting..."
                print(msg)
                QgsMessageLog.logMessage(
                    'Task "{name}" Exception: {exception}'.format(
                        name="initDBConnection",
                        exception=msg),
                    MESSAGE_CATEGORY, Qgis.Critical)
                QMessageBox.critical(self.dlg,
                                     'Import Masterfile error', msg)
            return conn
        else:
            print("File does not exist")
            QgsMessageLog.logMessage(
                'Task "{name}" not successful. Masterfile path does not exist: "{master_file_path}"'.format(
                    name="initDBConnection",
                    master_file_path=master_file_path),
                    MESSAGE_CATEGORY, Qgis.Warning)
            return None

    def validateMasterfile(self):
        print("You pushed Validate Masterfile button")
        self.dlg.cB_events.setStyleSheet("color: black")
        self.dlg.cB_events.setChecked(False)
        conn = self.initDBConnection()
        if conn is None:
            QMessageBox.critical(self.dlg,
                                 'Select Masterfile ',
                                 "You have not selected a valid Masterfile Database, please do so.\nExiting...")
        else:
            with conn:
                try:
                    cur = conn.cursor()
                    cur.execute('SELECT count(*) FROM rpl')
                    res = cur.fetchall()
                    if (res[0][0]==0):
                        self.dlg.cB_runline.setStyleSheet("color: red")
                        self.dlg.cB_runline.setChecked(False)
                    else:
                        self.dlg.cB_runline.setStyleSheet("color: green")
                        self.dlg.cB_runline.setChecked(True)

                    cur.execute('SELECT count(*) FROM as_laid')
                    res = cur.fetchall()
                    if (res[0][0] == 0):
                        self.dlg.cB_aslaid.setStyleSheet("color: red")
                        self.dlg.cB_aslaid.setChecked(False)
                    else:
                        self.dlg.cB_aslaid.setStyleSheet("color: green")
                        self.dlg.cB_aslaid.setChecked(True)

                    cur.execute('SELECT count(*) FROM trenching')
                    res = cur.fetchall()
                    if (res[0][0] == 0):
                        self.dlg.cB_capjet.setStyleSheet("color: red")
                        self.dlg.cB_capjet.setChecked(False)
                    else:
                        self.dlg.cB_capjet.setStyleSheet("color: green")
                        self.dlg.cB_capjet.setChecked(True)

                    cur.execute('SELECT count(*) FROM as_trenched')
                    res = cur.fetchall()
                    if (res[0][0] == 0):
                        self.dlg.cB_astrenched.setStyleSheet("color: red")
                        self.dlg.cB_astrenched.setChecked(False)
                    else:
                        self.dlg.cB_astrenched.setStyleSheet("color: green")
                        self.dlg.cB_astrenched.setChecked(True)

                    cur.execute('SELECT count(*) FROM events')
                    res = cur.fetchall()
                    if (res[0][0] == 0):
                        self.dlg.cB_events.setStyleSheet("color: red")
                        self.dlg.cB_events.setChecked(False)
                    else:
                        self.dlg.cB_events.setStyleSheet("color: green")
                        self.dlg.cB_events.setChecked(True)
                except sqlite3.IntegrityError:
                    err_msg = "Operation Types are already in this database"
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile',
                                         err_msg + "\nExiting...")
                except sqlite3.DatabaseError:
                    err_msg = "File exists, but its not a valid database or tables/columns are missing:" + str(sys.exc_info()[0])
                    print(err_msg)
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile',
                                         err_msg + "\nExiting...")
                except:
                    err_msg = "Unexpected error Trying to initializeDB:" + str(sys.exc_info()[0])
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile',
                                         err_msg + "\nExiting...")

    def populate_tid_and_sid_list(self):
        conn = self.initDBConnection()
        if conn is None:
            QMessageBox.critical(self.dlg,
                                 'Select Masterfile ',
                                 "You have not selected a valid Masterfile Database, please do so.\nExiting...")
        else:
            with conn:
                try:
                    cur = conn.cursor()
                    cur.execute('SELECT DISTINCT sid_id FROM as_trenched ORDER BY sid_id ASC;')
                    sid_tuples = cur.fetchall()
                    #print(sid_tuples)
                    cur.execute('SELECT DISTINCT trenching_id FROM trenching ORDER BY trenching_id ASC;')
                    tid_tuples = cur.fetchall()
                    #print(tid_tuples)
                    self.dlg.comboBox_TID.clear()
                    self.dlg.comboBox_SID.clear()
                    for tid_element in tid_tuples:
                        self.dlg.comboBox_TID.addItem(str(tid_element[0]))
                    print("TID OK")
                    for sid_element in sid_tuples:
                        self.dlg.comboBox_SID.addItem(str(sid_element[0]))
                    print("SID OK")
                except sqlite3.IntegrityError:
                    print("Operation Types are already in this database")
                except sqlite3.DatabaseError:
                    print("Probable some of the tables or columns has the wrong name:" + str(sys.exc_info()[0]))
                except:
                    print("Unexpected error Trying to SELECT DISTINCT sid_id and tid_id:" + str(sys.exc_info()[0]))

    def add_runline_to_proj(self, df_runline, epsg_code, runline_name):
        # df_runline.columns = ['eastings', 'northings']
        # print(df_runline.head())
        # Point list for the runline
        PointList = []
        point_dist = []
        point_dist_tot = []
        # Point Layer for Runline
        # param1 = 'Point?crs=' + str(crsId) + "&field=id:integer&field1=id2:str&field2=text2:str&field3=text3:str&field4=text4:str&text5=id5:str&index=yes"
        param1 = "Point?crs=%s&field=id:integer&index=yes" % (str(epsg_code))
        rpl_points_layer = self.iface.addVectorLayer(param1, str(runline_name) + '_Points',
                                                     'memory')

        # fields = rpl_points_layer.pendingFields()
        # Point feature for runline
        point_feature = QgsFeature()

        pr = rpl_points_layer.dataProvider()
        # print(pr.fields().count())
        rpl_points_layer.startEditing()
        # pr.addAttributes([QgsField("Index", QVariant.Int)])
        pr.addAttributes([QgsField("Eastings", QVariant.Double)])
        pr.addAttributes([QgsField("Northings", QVariant.Double)])
        pr.addAttributes([QgsField("From RLN [KP]", QVariant.Double)])
        pr.addAttributes([QgsField("SegmentLength[m]", QVariant.Double)])
        pr.addAttributes([QgsField("RunlineLength[KP]", QVariant.Double)])
        rpl_points_layer.updateFields()
        # print(pr.fields().count())
        # point_feature.setAttributes([1])

        for index, row in df_runline.iterrows():
            runline_points = QgsPointXY(float(row['eastings']), float(row['northings']))

            PointList.append(runline_points)
            if index == 0:
                point_dist.append(0)
                point_dist_tot.append(0)
            else:
                point_dist.append(PointList[index].distance(PointList[index - 1]))
                point_dist_tot.append(point_dist_tot[index - 1] + PointList[index].distance(PointList[index - 1]))

            point_feature.setAttributes(
                [index, float(row['eastings']), float(row['northings']), float(row['kp']), point_dist[index],
                 point_dist_tot[index] / 1000])
            point_feature.setGeometry(QgsGeometry.fromPointXY(runline_points))
            # point_feature.setAttributes(["test"])
            pr.addFeatures([point_feature])
            # point_feature.setAttribute(1, "text1")

        # Specify the geometry type
        rpl_points_layer.updateExtents()
        rpl_points_layer.commitChanges()

        # pr.addFeatures([point_feature])
        rpl_line_layer = self.iface.addVectorLayer("LineString?crs=" + str(epsg_code) + "&field=id:integer&index=yes",
                                                   str(runline_name) + "_Line", "memory")
        rpl_line_layer.startEditing()
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPolylineXY(PointList))
        feature.setAttributes([1])
        rpl_line_layer.addFeature(feature)
        rpl_line_layer.loadNamedStyle(
            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'RPL_line_direction.qml'))
        rpl_line_layer.commitChanges()

        """
        Use QChainage to get KP values every 500m
        """
        kp_layer_name = runline_name + "_KP_Points"
        chainagetool.points_along_line(layerout=kp_layer_name,
                                       startpoint=0,
                                       endpoint=False,
                                       distance=500,
                                       label="test",
                                       layer=rpl_line_layer,
                                       selected_only=False,
                                       force=True,
                                       fo_fila=False,
                                       divide=0,
                                       decimal=2)

        rpl_kp_pnt_layer = iface.activeLayer()

        # Configure label settings 1
        settings = QgsPalLayerSettings()
        settings.fieldName = "concat('KP:' + format_number(cngmeters/1000, 3))"
        settings.isExpression = True
        textFormat = QgsTextFormat()
        textFormat.setSize(10)
        settings.setFormat(textFormat)
        # create and append a new rule
        root = QgsRuleBasedLabeling.Rule(QgsPalLayerSettings())
        rule = QgsRuleBasedLabeling.Rule(settings, maximumScale=1, minimumScale=1000000)
        rule.setDescription('KP5')
        rule.setFilterExpression('cngmeters % 5000 = 0')
        rule2 = QgsRuleBasedLabeling.Rule(settings, maximumScale=1, minimumScale=50000)
        rule2.setDescription('KP05')
        rule2.setFilterExpression('cngmeters % 500 = 0')

        root.appendChild(rule)
        root.appendChild(rule2)

        # Apply label configuration
        rules = QgsRuleBasedLabeling(root)
        # rpl_kp_pnt_layer.setCustomProperty("labeling/enabled", "true")
        rpl_kp_pnt_layer.setLabeling(rules)
        rpl_kp_pnt_layer.triggerRepaint()
        # Apply label configuration
        rpl_kp_pnt_layer.setLabelsEnabled(True)

        rpl_kp_pnt_layer.loadNamedStyle(
            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'RPL_line_direction.qml'))

        """
        Set Visible Layers
        """
        node = QgsProject.instance().layerTreeRoot().findLayer(rpl_points_layer)
        if node:
            node.setItemVisibilityChecked(False)

        node2 = QgsProject.instance().layerTreeRoot().findLayer(kp_layer_name)
        if node2:
            node2.setItemVisibilityChecked(True)

        node3 = QgsProject.instance().layerTreeRoot().findLayer(rpl_line_layer)
        if node3:
            node3.setItemVisibilityChecked(True)

        print("Sucessfully added runline to proj: " + str(runline_name))

    def add_etr_track_to_proj(self, df, epsg_code, track_name):
        PointList = []
        point_dist = []
        point_dist_tot = []

        # Original Point Layer
        param1 = "Point?crs=%s&field=id:integer&index=yes" % (str(epsg_code))
        original_points_layer = self.iface.addVectorLayer(param1, str(track_name) + '_Points',
                                                     'memory')

        # Point feature for Original Point Layer
        point_feature = QgsFeature()

        pr = original_points_layer.dataProvider()
        original_points_layer.startEditing()
        pr.addAttributes([QgsField("Date[DD-MM-YY]", QVariant.String)])
        pr.addAttributes([QgsField("Time[HH:MM:SS.sss]", QVariant.String)])
        pr.addAttributes([QgsField("Eastings", QVariant.Double)])
        pr.addAttributes([QgsField("Northings", QVariant.Double)])
        pr.addAttributes([QgsField("WaterDepth[m]", QVariant.Double)])
        pr.addAttributes([QgsField("Roll[Deg]", QVariant.Double)])
        pr.addAttributes([QgsField("Pitch[Deg]", QVariant.Double)])
        pr.addAttributes([QgsField("Heading[Deg]", QVariant.Double)])
        pr.addAttributes([QgsField("Tide[m]", QVariant.Double)])
        original_points_layer.updateFields()

        for index, row in df.iterrows():
            runline_points = QgsPointXY(float(row['Easting']), float(row['Northing']))

            # If calculations is needed
            PointList.append(runline_points)
            if index == 0:
                point_dist.append(0)
                point_dist_tot.append(0)
            else:
                point_dist.append(PointList[index].distance(PointList[index - 1]))
                point_dist_tot.append(point_dist_tot[index - 1] + PointList[index].distance(PointList[index - 1]))

            point_feature.setAttributes(
                [index, row['Date'], row['Time'], float(row['Easting']), float(row['Northing']), float(row['WaterDepth']), float(row['Roll']), float(row['Pitch']), float(row['Heading']), float(row['Tide'])])
            point_feature.setGeometry(QgsGeometry.fromPointXY(runline_points))
            pr.addFeatures([point_feature])

        # Update project
        original_points_layer.updateExtents()
        original_points_layer.commitChanges()

        original_line_layer = self.iface.addVectorLayer("LineString?crs=" + str(epsg_code) + "&field=id:integer&index=yes",
                                                   str(track_name) + "_Line", "memory")
        original_line_layer.startEditing()

        # Additional Feature for Line
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPolylineXY(PointList))
        feature.setAttributes([1])
        original_line_layer.addFeature(feature)
        original_line_layer.loadNamedStyle(
            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'SID_as-trenched.qml'))
        original_line_layer.commitChanges()

        # """
        # Use QChainage to get KP values every 500m
        # """
        # kp_layer_name = runline_name + "_KP_Points"
        # chainagetool.points_along_line(layerout=kp_layer_name,
        #                                startpoint=0,
        #                                endpoint=False,
        #                                distance=500,
        #                                label="test",
        #                                layer=rpl_line_layer,
        #                                selected_only=False,
        #                                force=True,
        #                                fo_fila=False,
        #                                divide=0,
        #                                decimal=2)
        #
        # rpl_kp_pnt_layer = iface.activeLayer()
        #
        # # Configure label settings 1
        # settings = QgsPalLayerSettings()
        # settings.fieldName = "concat('KP:' + format_number(cngmeters/1000, 3))"
        # settings.isExpression = True
        # textFormat = QgsTextFormat()
        # textFormat.setSize(10)
        # settings.setFormat(textFormat)
        # # create and append a new rule
        # root = QgsRuleBasedLabeling.Rule(QgsPalLayerSettings())
        # rule = QgsRuleBasedLabeling.Rule(settings, maximumScale=1, minimumScale=1000000)
        # rule.setDescription('KP5')
        # rule.setFilterExpression('cngmeters % 5000 = 0')
        # rule2 = QgsRuleBasedLabeling.Rule(settings, maximumScale=1, minimumScale=50000)
        # rule2.setDescription('KP05')
        # rule2.setFilterExpression('cngmeters % 500 = 0')
        #
        # root.appendChild(rule)
        # root.appendChild(rule2)
        #
        # # Apply label configuration
        # rules = QgsRuleBasedLabeling(root)
        # # rpl_kp_pnt_layer.setCustomProperty("labeling/enabled", "true")
        # rpl_kp_pnt_layer.setLabeling(rules)
        # rpl_kp_pnt_layer.triggerRepaint()
        # # Apply label configuration
        # rpl_kp_pnt_layer.setLabelsEnabled(True)
        #
        # rpl_kp_pnt_layer.loadNamedStyle(
        #     os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'RPL_line_direction.qml'))
        #
        """
        Set Visible Layers
        """
        node = QgsProject.instance().layerTreeRoot().findLayer(original_points_layer)
        if node:
            node.setItemVisibilityChecked(False)

        node2 = QgsProject.instance().layerTreeRoot().findLayer(original_line_layer)
        if node2:
            node2.setItemVisibilityChecked(True)

        print("Sucessfully added Eiva ETR Track to proj: " + str(track_name))

    def add_waypoints_to_proj(self, df, epsg_code, name):
        PointList = []
        point_dist = []
        point_dist_tot = []

        # Original Point Layer
        param1 = "Point?crs=%s&field=id:integer&index=yes" % (str(epsg_code))
        original_points_layer = self.iface.addVectorLayer(param1, str(name) + '_Points',
                                                     'memory')

        # Point feature for Original Point Layer
        point_feature = QgsFeature()

        pr = original_points_layer.dataProvider()
        original_points_layer.startEditing()
        cnt = 0
        for col in df.columns:
            if cnt == (0 or 7 or 10 or 12):
                pr.addAttributes([QgsField(str(col), QVariant.String)])
            else:
                pr.addAttributes([QgsField(str(col), QVariant.Double)])
            cnt = cnt + 1
        original_points_layer.updateFields()

        for index, row in df.iterrows():
            position_points = QgsPointXY(float(row['Easting']), float(row['Northing']))

            PointList.append(position_points)
            if index == 0:
                point_dist.append(0)
                point_dist_tot.append(0)
            else:
                point_dist.append(PointList[index].distance(PointList[index - 1]))
                point_dist_tot.append(point_dist_tot[index - 1] + PointList[index].distance(PointList[index - 1]))
            row[0] = row[0].strip('"')

            if len(row) > 13:
                row[7] = row[7].strip('"')
                row[10] = row[10].strip('"')
                row[12] = row[12].strip('"')
            attributes_list = row.tolist()
            attributes_list.insert(0, index)
            point_feature.setAttributes(attributes_list)

            point_feature.setGeometry(QgsGeometry.fromPointXY(position_points))
            pr.addFeatures([point_feature])

        # Update project
        original_points_layer.updateExtents()
        original_points_layer.commitChanges()

        # Add single labels
        pal_layer = QgsPalLayerSettings()
        pal_layer.fieldName = 'Name'
        pal_layer.enabled = True
        pal_layer.placement = QgsPalLayerSettings.Line
        labels = QgsVectorLayerSimpleLabeling(pal_layer)
        original_points_layer.setLabeling(labels)
        original_points_layer.setLabelsEnabled(True)
        original_points_layer.triggerRepaint()

        """
        Set Visible Layers
        """
        node = QgsProject.instance().layerTreeRoot().findLayer(original_points_layer)
        if node:
            node.setItemVisibilityChecked(True)

    def add_xyz_to_proj(self, xyz_filename, epsg_code, name):
        params_gdal_translate = "-of GTiff -b 1 -co COMPRESS=DEFLATE -co PREDICTOR=2 -co ZLEVEL=9 -a_srs " + str(epsg_code)
        params_gdaldem_hillshade = "-of GTiff -b 1 -z 1.0 -s 1.0 -az 315.0 -alt 45.0 -co COMPRESS=DEFLATE -co PREDICTOR=2 -co ZLEVEL=9"
        src_ds = gdal.Open(xyz_filename)
        translate_options = gdal.TranslateOptions(gdal.ParseCommandLine(params_gdal_translate))
        translate_options_dem = gdal.DEMProcessingOptions(gdal.ParseCommandLine(params_gdaldem_hillshade))
        export_path = os.path.join(os.path.dirname(xyz_filename), name + ".tif")
        export_path_dem = os.path.join(os.path.dirname(xyz_filename), name + "_Hillshade.tif")
        try:
            gdal.Translate(export_path, src_ds, options=translate_options)
        except ValueError as e:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)

            msgBox.setText("Looks like the XYZ file is not SORTED. Try to SORT?")
            msgBox.setInformativeText(
                "This will take a while and create a new XYZ file in same folder")
            msgBox.setWindowTitle("Import XYZ in QGIS")
            # msg.setDetailedText("The details are as follows:")
            msgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
            # msg.buttonClicked.connect(msgbtn)

            retval = msgBox.exec_()
            if retval == 16384:
                sorted_fn = os.path.join(os.path.dirname(xyz_filename), name + "_sorted.xyz")
                sort_arr = self.sort_xyz(xyz_filename, sorted_fn, True)
                src_ds = gdal.Open(sorted_fn)
                try:
                    gdal.Translate(export_path, src_ds, options=translate_options)
                except ValueError as e:
                    msg = "GDAL Translate failed also for SORTED XYZ, Try to properly re-export XYZ from NaviModel... Aborting... : " + str(
                        e)
                    QMessageBox.critical(self.iface.mainWindow(),
                                         'Import Eiva XYZ File', msg)
                    return
            elif retval == 65536:
                print("Aborting")
                return
            elif retval == 4194304:
                print("Aborting")
                return

        gdal.DEMProcessing(export_path_dem, export_path, processing='hillshade', options=translate_options_dem)
        fcn = QgsColorRampShader()
        fcn.setColorRampType(QgsColorRampShader.Interpolated)
        lst = [QgsColorRampShader.ColorRampItem(0, QColor(255, 0, 0)),
               QgsColorRampShader.ColorRampItem(64, QColor(255, 128, 0)),
               QgsColorRampShader.ColorRampItem(128, QColor(255, 255, 100)),
               QgsColorRampShader.ColorRampItem(192, QColor(153, 255, 153)),
               QgsColorRampShader.ColorRampItem(255, QColor(0, 0, 255))]
        fcn.setColorRampItemList(lst)
        shader = QgsRasterShader()
        shader.setRasterShaderFunction(fcn)

        rlayer = iface.addRasterLayer(export_path)
        rlayer_hillshade = iface.addRasterLayer(export_path_dem)

        renderer = QgsSingleBandPseudoColorRenderer(rlayer.dataProvider(), 1, shader)
        rlayer.setRenderer(renderer)
        rlayer_hillshade.renderer().setOpacity(0.6)
        # rlayer.setCacheImage(None)
        # rlayer_hillshade.setCacheImage(None)
        rlayer.triggerRepaint()
        rlayer_hillshade.triggerRepaint()

        print(rlayer.renderer().type())
        print(rlayer_hillshade.renderer().type())
        print("Imported GeoTiff file: " + str(export_path) + " with parameters: " + str(params_gdal_translate))
        print("Imported Hillshade GeoTiff file: " + str(export_path_dem) + " with parameters: " + str(params_gdaldem_hillshade))
        src_ds = None
        export_path = None

    def sort_xyz(self, src_filename1, src_sorted_filename, exp_sorted):
        with open(src_filename1, mode='rt') as f, open(src_sorted_filename, 'w', newline='') as final:
            writer = csv.writer(final, delimiter=' ')
            reader = csv.reader(f, delimiter=' ')
            _ = next(reader)
            sorted1 = sorted(reader, key=lambda row1: float(row1[0]), reverse=False)
            sorted2 = sorted(sorted1, key=lambda row1: float(row1[1]), reverse=True)
            if exp_sorted:
                for row1 in sorted2:
                    writer.writerow(row1)
        return sorted2

    def add_linked_events_to_proj(self, df_linked_event, epsg_code, name):
        conn = self.initDBConnection()
        if conn is None:
            QMessageBox.critical(self.dlg,
                                 'Select Masterfile ',
                                 "You have not selected a valid Masterfile Database, please do so.\nExiting...")
            self.close_master_file_connect_signals()
            return

        ''' Create one layer for one type of linked event I.e Freespans'''
        linea = iface.addVectorLayer("LineString?crs=epsg:" + str(epsg_code) + "&field=id:integer&index=yes", name, "memory")
        pr = linea.dataProvider()
        linea.startEditing()
        feature = QgsFeature()

        cnt = 0
        for col in df_linked_event.columns:
            if cnt == (0 or 1 or 2):
                pr.addAttributes([QgsField(str(col), QVariant.Double)])

            else:
                pr.addAttributes([QgsField(str(col), QVariant.String)])
            cnt = cnt + 1
        pr.addAttributes([QgsField("event_length_kp_based", QVariant.Double)])
        pr.addAttributes([QgsField("event_length_actual", QVariant.Double)])
        linea.updateFields()

        for cnt, row in df_linked_event.iterrows():
            sql_query = 'SELECT kp, easting, northing ' \
                        'FROM NxN_Last_Pass ' \
                        'WHERE kp >= ' + str(row.kp_start) + ' and kp <= ' + str(row.kp_end)
            df_linked_event_elem = pd.read_sql(sql_query, conn)
            if df_linked_event_elem.empty:
                err_txt = "Seems like there is no As-Trenched Last pass data for " + str(row.event_type) + ":" + str(row.event_code_start) + " event in this kp range[" + str(row.kp_start) + "-" + str(row.kp_end) + "] in the Masterfile\nContinuing with the other..."
                QMessageBox.critical(self.dlg,
                                     'Import Linked Events error',
                                     err_txt)
                pass
            else:
                event_element_point_list = []
                for index, pos_row in df_linked_event_elem.iterrows():
                    if (pos_row['easting'] is None or pos_row['northing'] is None):
                        print("KP: " + str(pos_row['kp']) + " Skipping this line since no as-trenched data")
                    else:
                        #print(pos_row)
                        event_element_pt = QgsPoint(float(pos_row['easting']), float(pos_row['northing']))
                        event_element_point_list.append(event_element_pt)

                        # Calculate actual event element distance
                        if index == 0:
                            event_element_actual_dist = 0
                        else:
                            event_element_actual_dist = event_element_actual_dist + (event_element_point_list[index].distance(event_element_point_list[index - 1]))

                #print(event_element_point_list)
                if event_element_point_list:
                    feature.setGeometry(QgsGeometry.fromPolyline(event_element_point_list))
                    attributes_list = row.tolist()
                    attributes_list.insert(0, cnt)
                    attributes_list.insert(len(attributes_list), round((row['kp_end'] - row['kp_start'])*1000, 0))
                    attributes_list.insert(len(attributes_list), round(event_element_actual_dist, 0))
                    feature.setAttributes(attributes_list)
                    linea.addFeature(feature)
        linea.commitChanges()

        # Configure label settings 1
        settings = QgsPalLayerSettings()
        settings.fieldName = "concat(event_type + ' ' + to_string(id) +  ': ' + to_string(round( event_length_kp_based,0) )+ 'm' )"
        settings.isExpression = True
        settings.placement = QgsPalLayerSettings.Line
        text_format = QgsTextFormat()
        text_format.setSize(10)
        settings.setFormat(text_format)
        # create and append a new rule
        labels = QgsVectorLayerSimpleLabeling(settings)
        linea.setLabeling(labels)
        linea.setLabelsEnabled(True)
        linea.triggerRepaint()

    def run_importEiva(self):
        print("Running EIVA import")
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.eiva_first_start:
            self.eiva_first_start = False
            self.eiva_dlg = loadEivaDialog()

        self.eiva_dlg.open_folder.clicked.connect(self.open_select_eiva)
        # show the dialog
        self.eiva_dlg.show()
        # Run the dialog event loop
        result = self.eiva_dlg.exec_()

        self.eiva_dlg.cB_EPSG.clicked.connect(self.handle_QGIS_Project_EPSG_eiva)

        if self.eiva_dlg.cB_EPSG.isChecked():
            epsg_code = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
        else:
            epsg_code = self.eiva_dlg.sB_epsg.value()
            if epsg_code == 11111:
                epsg_code = ''
            else:
                epsg_code = "EPSG:" + str(epsg_code)

        if result:
            #Get EIVA file from GUI
            eiva_file = self.eiva_dlg.path_eiva_file.value()
            filename, file_extension = os.path.splitext(eiva_file)
            # basename = os.path.basename(runline_file)
            # self.runline_dlg.layer_name.setValue(basename)
            if not os.path.exists(eiva_file):
                QMessageBox.critical(self.eiva_dlg,
                                     'Read EIVA file',
                                     "Could not find EIVA file. File does not exist?\nExiting...")
                self.eiva_dlg.open_folder.clicked.disconnect(self.open_select_eiva)
                return
            if file_extension == '.rln' or file_extension == '.RLN' or file_extension == '.rlx' or file_extension == '.RLX':
                n_start_rows = []
                n_end_rows = []
                runline_name = []
                with open(eiva_file, "r") as myfile:
                    for cnt, line in enumerate(myfile):
                        if cnt == 0:
                            # print("first line")
                            first_line = line
                        elif cnt == 1:
                            # print("second line")
                            second_line = line
                            if first_line[0] == '#' and second_line[0] == '"':
                                n_start_rows.append(cnt+1)
                                runline_name.append(line.replace('\n', '').replace('"', ''))
                            elif first_line[0] == '#' and second_line[0] != '"':
                                n_start_rows.append(cnt)
                                runline_name.append(str(self.eiva_dlg.layer_name.value()))
                                # runline_name.append(first_line.replace('\n', '').replace('"', '').replace('#', 'TimeName'))
                            elif first_line[0] == '"':
                                n_start_rows.append(cnt)
                                runline_name.append(first_line.replace('\n', '').replace('"', ''))
                            elif first_line[0] != '"' and first_line[0] != '#' and second_line[0] != '#' and second_line[0] != '"':
                                n_start_rows.append(cnt-1)
                                runline_name.append(str(self.eiva_dlg.layer_name.value()))
                        else:
                            if line[0] == '"':
                                n_start_rows.append(cnt+1)
                                runline_name.append(line.replace('\n', '').replace('"', ''))
                                n_end_rows.append(cnt)
                    n_end_rows.append(cnt+1)
                myfile.close()

                if file_extension == '.rln' or file_extension == '.RLN':
                    print(n_start_rows)
                    print(n_end_rows)
                    for i, run_name in enumerate(runline_name):
                        print("Adding runline name: " + str(run_name))
                        df_seg = pd.read_csv(eiva_file, sep=' |,|;', skiprows=n_start_rows[i], nrows=n_end_rows[i]-n_start_rows[i], skip_blank_lines=True, comment='#', names=['eastings', 'northings', 'kp'], engine='python')
                        self.add_runline_to_proj(df_seg, epsg_code, run_name)

                elif file_extension == '.rlx' or file_extension == '.RLX':
                    """For RLX files remove extra columns in name"""
                    runline_name = [w.split(';', 1)[0] for w in runline_name]

                    for i, run_name in enumerate(runline_name):
                        print("Adding runline name: " + str(run_name))
                        # TODO: Might change RLX import to read in all information like eastings/northings end, kp end, and param 1-3
                        df_seg = pd.read_csv(eiva_file, sep=';', skiprows=n_start_rows[i], nrows=n_end_rows[i]-n_start_rows[i], skip_blank_lines=True, comment='#', names=['eastings', 'northings', 'eastings_end', 'northings_end','kp','kp_end', 'param1', 'param2', 'param3'], engine='python')
                        # print(df_seg)
                        self.add_runline_to_proj(df_seg, epsg_code, run_name)

                print("Finished Loading Runline file")

            elif file_extension == '.etr' or file_extension == '.ETR':
                print("Importing ETR file")
                df_etr = pd.read_csv(eiva_file, sep=' ', skip_blank_lines=True, comment='#', header=0, engine='python')
                self.add_etr_track_to_proj(df_etr, epsg_code, str(self.eiva_dlg.layer_name.value()))
                print("Finished importing ETR file")

            elif file_extension == ('.wpt' or '.WPT'):
                print("Importing WPT file")
                df = pd.read_csv(eiva_file, sep=',', skip_blank_lines=True, comment='#', names=['Name', 'Easting', 'Northing', 'Altitude'], engine='python')
                self.add_waypoints_to_proj(df, epsg_code, str(self.eiva_dlg.layer_name.value()))
                print("Finished importing WPT file")

            elif file_extension == ('.wp2' or '.WP2'):
                print("Importing WP2 file")
                df = pd.read_csv(eiva_file, sep=';|,', skip_blank_lines=True, comment='#', names=['Name', 'Easting', 'Northing', 'Altitude', 'fgcolor_palette', 'bgcolor_palette', 'textcolor_palette', 'fontname', 'fontsize', 'symbol_filled', 'symbolfont', 'symbolfontsize', 'note', 'titleformat', 'radius', 'extracircles', 'radiusinc', 'state', 'param17', 'param18'], engine='python')
                self.add_waypoints_to_proj(df, epsg_code, str(self.eiva_dlg.layer_name.value()))
                print("Finished importing WP2 file")

            elif file_extension == ('.xyz' or '.XYZ'):
                print("Importing XYZ file")
                self.add_xyz_to_proj(eiva_file, epsg_code, str(self.eiva_dlg.layer_name.value()))
                print("Finished importing XYZ file")
            else:
                err_text = "File Format: " + str(file_extension) +  " is NOT supported. CURRENTLY SUPPORTED FORMATS: RLN, RLX, ETR, WP2 and WPT \nExiting..."
                print(err_text)
                QMessageBox.critical(self.eiva_dlg,
                                     'Read EIVA file',
                                     str(err_text))
                self.eiva_dlg.open_folder.clicked.disconnect(self.open_select_eiva)
            self.iface.zoomToActiveLayer()

        try:
            self.eiva_dlg.open_folder.clicked.disconnect(self.open_select_eiva)
        except TypeError as e:
            ''' Not needed to run this.. '''
            return

    def create_categorized_layers(self, r_layer, id_attr):
        id_attr = str(id_attr)
        # get unique values
        fni = r_layer.fields().indexFromName(id_attr)
        unique_ids = r_layer.dataProvider().uniqueValues(fni)
        QgsMessageLog.logMessage("sstyle for run layer..." + str(unique_ids))
        # define categories
        categories = []
        for unique_id in unique_ids:
            # initialize the default symbol for this geometry type
            symbol = QgsSymbol.defaultSymbol(r_layer.geometryType())
            symbol.setOpacity(0.5)

            layer_style={}
            layer_style['color'] = '%d, %d, %d' % (randrange(0, 256), randrange(0, 256), randrange(0, 256))
            layer_style['outline'] = '#000000'
            symbolLayer = QgsSimpleFillSymbolLayer.create(layer_style)
            if symbolLayer is not None:
                symbol.changeSymbolLayer(0, symbolLayer)
            category = QgsRendererCategory(unique_id, symbol, str(unique_id))
            categories.append(category)

            renderer = QgsCategorizedSymbolRenderer(id_attr, categories)
            # assign the created renderer to the layer
            if renderer is not None:
                r_layer.setRenderer(renderer)
            r_layer.triggerRepaint()
    # def run_importRunline(self):
    #     print("Running Runline import")
    #     """Run method that performs all the real work"""
    #
    #     # Create the dialog with elements (after translation) and keep reference
    #     # Only create GUI ONCE in callback, so that it will only load when the plugin is started
    #     if self.runline_first_start:
    #         self.runline_first_start = False
    #         self.runline_dlg = loadRunlineDialog()
    #
    #     # show the dialog
    #     self.runline_dlg.show()
    #     # Run the dialog event loop
    #     result = self.runline_dlg.exec_()
    #
    #     self.runline_dlg.open_folder.clicked.connect(self.open_select_runline)
    #
    #     if result:
    #         # Get crs for current project
    #         crsId = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
    #         #crsId = "EPSG=32633"
    #         #print(crsId)
    #         #Get runline file from GUI
    #         runline_file = self.runline_dlg.path_rln_rlx.value()
    #         filename, file_extension = os.path.splitext(runline_file)
    #         #basename = os.path.basename(runline_file)
    #         #self.runline_dlg.layer_name.setValue(basename)
    #         if not os.path.exists(runline_file):
    #             QMessageBox.critical(self.iface.mainWindow(),
    #                                  'Read Runline file',
    #                                  "Could not find Runline file. Runline file does not exist?\nExiting...")
    #             return
    #         if file_extension == '.rln':
    #             print("Importing RLN file")
    #             df_runline = pd.read_csv(runline_file, sep=';', skiprows=2, header=None)
    #             df_runline.columns = ['eastings', 'northings']
    #             print(df_runline.head())
    #             # Point list for the runline
    #             PointList = []
    #             point_dist = []
    #             point_dist_tot = []
    #             # Point Layer for Runline
    #             #param1 = 'Point?crs=' + str(crsId) + "&field=id:integer&field1=id2:str&field2=text2:str&field3=text3:str&field4=text4:str&text5=id5:str&index=yes"
    #             param1 = 'Point?crs=' + str(
    #                 crsId) + "&field=id:integer&index=yes"
    #             #param2 = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s" % (
    #             #"UTF-8", ",", "easting", "northing")
    #             #param3 = 'Point?crs=' + str(crsId) + "&field=id:integer&index=yes"
    #             point_layer = self.iface.addVectorLayer(param1, 'Point_' + str(self.runline_dlg.layer_name.value()), 'memory')
    #
    #             #fields = point_layer.pendingFields()
    #             # Point feature for runline
    #             point_feature = QgsFeature()
    #
    #             pr = point_layer.dataProvider()
    #             print(pr.fields().count())
    #             point_layer.startEditing()
    #             #pr.addAttributes([QgsField("Index", QVariant.Int)])
    #             pr.addAttributes([QgsField("Eastings", QVariant.Double)])
    #             pr.addAttributes([QgsField("Northings", QVariant.Double)])
    #             pr.addAttributes([QgsField("SegmentLength[m]", QVariant.Double)])
    #             pr.addAttributes([QgsField("RunlineLength[KP]", QVariant.Double)])
    #             point_layer.updateFields()
    #             print(pr.fields().count())
    #             # point_feature.setAttributes([1])
    #
    #             for index, row in df_runline.iterrows():
    #                 runline_points = QgsPointXY(float(row['eastings']), float(row['northings']))
    #
    #                 PointList.append(runline_points)
    #                 if index == 0:
    #                     point_dist.append(0)
    #                     point_dist_tot.append(0)
    #                 else:
    #                     point_dist.append(PointList[index].distance(PointList[index-1]))
    #                     point_dist_tot.append(point_dist_tot[index - 1] + PointList[index].distance(PointList[index - 1]))
    #
    #                 point_feature.setAttributes([index, float(row['eastings']), float(row['eastings']), point_dist[index], point_dist_tot[index]/1000])
    #                 point_feature.setGeometry(QgsGeometry.fromPointXY(runline_points))
    #                 #point_feature.setAttributes(["test"])
    #                 pr.addFeatures([point_feature])
    #                 #point_feature.setAttribute(1, "text1")
    #
    #             # Specify the geometry type
    #             point_layer.updateExtents()
    #             point_layer.commitChanges()
    #
    #             #pr.addFeatures([point_feature])
    #             linea = self.iface.addVectorLayer("LineString?crs=" + str(crsId) + "&field=id:integer&index=yes", "Line_" + str(self.runline_dlg.layer_name.value()), "memory")
    #             linea.startEditing()
    #             feature = QgsFeature()
    #             feature.setGeometry(QgsGeometry.fromPolylineXY(PointList))
    #             feature.setAttributes([1])
    #             linea.addFeature(feature)
    #             linea.commitChanges()
    #             self.iface.zoomToActiveLayer()
    #
    #
    #             #QgsProject.instance().addMapLayers([point_layer])  # 3 correction
    #             # vectorLyr = QgsVectorLayer('pyqgis_data/nyc/NYC_MUSEUMS_GEO.shp', 'Museums', "ogr")
    #             # n_features = vectorLyr.featureCount()  # added line
    #             # vpr = vectorLyr.dataProvider()
    #             # pnt = QgsGeometry.fromPoint(QgsPoint(-74.80, 40.549))
    #             # f = QgsFeature()
    #             # f.setGeometry(pnt)
    #             # f.setAttributes([n_features])  # added line
    #             # vpr.addFeatures([f])
    #             # vectorLyr.updateExtents()
    #
    #
    #             print("Finished Loading RLN file")
    #         elif file_extension == '.rlx':
    #             print("Importing RLX file")
    #
    #         elif file_extension == '.wp2':
    #             print("Importing wp2 file")
    #
    #         else:
    #             print("Can Only import RLN and RLX files at the moment")
    #             QMessageBox.critical(self.iface.mainWindow(),
    #                                  'Read Runline file',
    #                                  "Could not read file extention: " + str(file_extension) + ". Only RLX and RLN is compatible?\nExiting...")

    # def run_importTrack(self):
    #     print("Running Track import")
    #     """Run method that performs all the real work"""
    #
    #     # Create the dialog with elements (after translation) and keep reference
    #     # Only create GUI ONCE in callback, so that it will only load when the plugin is started
    #     if self.track_first_start == True:
    #         self.track_first_start = False
    #         self.track_dlg = loadTrackDialog()
    #
    #     # show the dialog
    #     self.track_dlg.show()
    #     # Run the dialog event loop
    #     result = self.track_dlg.exec_()
    #
    #     self.track_dlg.open_folder.clicked.connect(self.open_select_etr)
    #
    #     if result:
    #         track_file = self.track_dlg.path_etr.value()
    #         filename, file_extension = os.path.splitext(track_file)
    #         if not os.path.exists(track_file):
    #             QMessageBox.critical(self.iface.mainWindow(),
    #                                  'Read Track file',
    #                                  "Could not find Track file. Track file does not exist?\nExiting...")
    #             return
    #         if file_extension == '.etr':
    #             print("Importing ETR file")
    #         else:
    #             print("Can Only import ETR files at the moment")
    #             QMessageBox.critical(self.iface.mainWindow(),
    #                                  'Read Track file',
    #                                  "Could not read file extention: " + str(
    #                                      file_extension) + ". Only ETRN is compatible?\nExiting...")
    def check_event_linking(self, df_copy, start_code, end_code):
        start_code = str(start_code)
        end_code = str(end_code)
        print(df_copy)
        df_copy.loc[:, 'QC'] = np.nan
        df_copy.loc[::1, 'QC'] = end_code
        df_copy.loc[::2, 'QC'] = start_code
        df_copy.loc[:, 'QC_bol'] = (df_copy['event_code'] == df_copy['QC'])
        temp = False
        error_list = []
        for cnt, row in df_copy.iterrows():
            if cnt == 0:
                prev_row = row
            if row['QC_bol'] == temp:
                # TODO: Find a better or more clever way for linked events. They need to be correctly exported from NaviModel
                err_txt = "Two similar event-codes after each other:\nKP: " + str(
                    prev_row['kp']) + ". EventCode: " + str(prev_row['event_code']) + ".\nKP: " + str(
                    row['kp']) + ". EventCode: " + str(row['event_code']) + "[REMOVED!!!].\n"
                print(err_txt)
                error_list.append(cnt)
                ''' Invert boolean'''
                temp = not temp
            '''Save the last row'''
            prev_row = row
        df_copy = df_copy.drop(df_copy.index[error_list])
        df_copy = df_copy.drop("QC", axis=1)
        df_copy = df_copy.drop("QC_bol", axis=1)
        print("Removed in Total: " + str(len(error_list)) + " EventCodes for " + str(
            df_copy['event_type'].iloc[0]) + ":" + str(df_copy['event_code'].iloc[0]) + "/" + str(
            df_copy['event_code'].iloc[1]))

        if len(df_copy) % 2 == 0:
            ''' Even number Do nothing'''
        else:
            df_copy.drop(df_copy.tail(1).index, inplace=True)  # drop last row

        frame = {'kp_start': df_copy['kp'].iloc[::2].reset_index(drop=True),
                 'kp_end': df_copy['kp'].iloc[1::2].reset_index(drop=True),
                 'event_code_start': df_copy['event_code'].iloc[::2].reset_index(drop=True),
                 'event_code_end': df_copy['event_code'].iloc[1::2].reset_index(drop=True),
                 'event_type': df_copy['event_type'].iloc[1::2].reset_index(drop=True)}
        df_ret = pd.DataFrame(frame)
        print("There are: " + str(len(df_ret)) + " Linked Events left for this type")
        return df_ret

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = iSurveyToolsDialog()

        self.dlg.pB_Browse.clicked.connect(self.openSelectDB)
        self.dlg.pB_Validate.clicked.connect(self.validateMasterfile)
        self.dlg.pB_Refresh_tid_sid.clicked.connect(self.populate_tid_and_sid_list)
        self.dlg.cB_EPSG.clicked.connect(self.handle_QGIS_Project_EPSG)

        # Get Masterfile path
        mf_path = QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('project_masterfile_fp')
        if mf_path is not None:
            self.dlg.line_db_path.setText(str(mf_path))
            self.validateMasterfile()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        if self.dlg.cB_EPSG.isChecked():
            epsg_code = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
        else:
            epsg_code = self.dlg.sB_epsg.value()
            if epsg_code == 11111:
                epsg_code = ''
            else:
                epsg_code = "EPSG:" + str(epsg_code)

        # Create a New project
        #pathQGS = "NewProject.qgs"
        project = QgsProject.instance()
        #project.setFileName(pathQGS)
        # See if OK was pressed
        if result:
            if self.dlg.cB_runline.isChecked():
                conn = self.initDBConnection()
                if conn is None:
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile ',
                                         "You have not selected a valid Masterfile Database, please do so.\nExiting...")
                    self.close_master_file_connect_signals()
                    return
                print("Start Importing Runline")
                sql_query_rpl = 'SELECT * FROM rpl ORDER BY kp ASC;'
                df_rpl = pd.read_sql(sql_query_rpl, conn)
                if df_rpl.empty:
                    QMessageBox.critical(self.dlg,
                                         'Import Runline error',
                                         "Seems like the Runline table in the Masterfile is empty \nExiting...")
                    return
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_RPL_table.csv'
                    df_rpl.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing", str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF Runline", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)

                    """
                                       Adding line feature based on the points, qgis:pointstopath
                                       2020-02-08 kele 
                                       """
                    if self.dlg.cB_runline_lin.isChecked():
                        print('Creating Runline line feature')
                        layer = iface.activeLayer()
                        print('Selected Layer name is {}'.format(layer.name()))
                        alg_params = {
                            'DATE_FORMAT': '',
                            'INPUT': layer,
                            'ORDER_FIELD': 'kp',
                            'GROUP_FIELD': '',  # no grouping on runline
                            'OUTPUT': 'TEMPORARY_OUTPUT'  # temporary layer
                        }
                        result = processing.run('qgis:pointstopath', alg_params)
                        # TODO:add a tst too see if the process was a success
                        # if not result.isValid():  -does not work as isValid does not work for dictionaries
                        # print('processing failed')
                        QgsProject.instance().addMapLayer(result['OUTPUT'])  # showing layer on
                        layer = iface.activeLayer()
                        print('success generating path from {} with the following output name: {}'.format(layer.name(),
                                                                                                          result[
                                                                                                              'OUTPUT'].name()))
                        layer.setName('MF Runline_Line')  # renaming layer
                        layer.loadNamedStyle(
                            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'RPL_line_direction.qml'))

                        # Create different colors for categorized layers
                        # self.create_categorized_layers(layer, "kp")
                        """
                        Set Visible Layers
                        """
                        node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                        if node:
                            node.setItemVisibilityChecked(False)

                    self.iface.zoomToActiveLayer()
                    msg = "Sucessfully imported Runline as layer: MasterFile_Runline"
                    QgsMessageLog.logMessage(
                        'Task "{name}" completed\n'
                        '"{msg}")'.format(
                            name="Import Runline",
                            msg=msg),
                        MESSAGE_CATEGORY, Qgis.Success)
                    # QMessageBox.information(self.iface.mainWindow(),
                    #                      'Sucessfully Imported Runline',
                    #                      "Sucessfully imported Runline as layer: \n MasterFile_Runline")

            if self.dlg.cB_aslaid.isChecked():
                conn = self.initDBConnection()
                if conn is None:
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile ',
                                         "You have not selected a valid Masterfile Database, please do so.\nExiting...")
                    self.close_master_file_connect_signals()
                    return
                print("Start Importing As-Laid")
                sql_query_as_laid = 'SELECT * FROM as_laid ORDER BY kp ASC;'
                df_as_laid = pd.read_sql(sql_query_as_laid, conn)
                if df_as_laid.empty:
                    QMessageBox.critical(self.dlg,
                                         'Import As-Laid error',
                                         "Seems like the As-Laid table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_AL_table.csv'
                    df_as_laid.to_csv(name_csv, index=False)
                    #df_rpl.to_csv("C:\\temp\\test0101.csv", index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing", str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF As-Laid", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)
                    msg = "Sucessfully imported As-Laid as layer: MasterFileAs-Laid"
                    QgsMessageLog.logMessage(
                        'Task "{name}" completed\n'
                        '"{msg}")'.format(
                            name="Import As-Laid",
                            msg=msg),
                        MESSAGE_CATEGORY, Qgis.Success)
                    # QMessageBox.information(self.iface.mainWindow(),
                    #                      'Sucessfully Imported As-Laid',
                    #                      "Sucessfully imported As-Laid as layer: \n MasterFileAs-Laid")

                    """
                    Adding line feature based on the points, qgis:pointstopath
                    2020-02-08 kele 
                    """
                    if self.dlg.cB_aslaid_lin.isChecked():
                        print('Creating as-laid line feature')
                        layer = iface.activeLayer()
                        print('Selected Layer name is {}'.format(layer.name()))
                        alg_params = {
                             'DATE_FORMAT': '',
                             'INPUT': layer,
                             'ORDER_FIELD': 'kp',
                             'GROUP_FIELD': '',     # no grouping on as-laid
                             'OUTPUT': 'TEMPORARY_OUTPUT'   # temporary layer
                        }
                        result = processing.run('qgis:pointstopath', alg_params)
                        # TODO:add a test to see if the process was a success
                        # if not result.isValid():  -does not work as isValid does not work for dictionaries
                        # print('processing failed')
                        QgsProject.instance().addMapLayer(result['OUTPUT']) # showing layer on
                        layer = iface.activeLayer()
                        print('success generating path from {} with the following output name: {}'.format(layer.name(),
                                                                                              result['OUTPUT'].name()))
                        layer = iface.activeLayer()
                        layer.setName('MF As-Laid_Line')     # renaming layer

            if self.dlg.cB_capjet.isChecked():
                conn = self.initDBConnection()
                if conn is None:
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile ',
                                         "You have not selected a valid Masterfile Database, please do so.\nExiting...")
                    self.close_master_file_connect_signals()
                    return
                print("Start Capjet Track")
                sql_query_capjet_track = 'SELECT * FROM trenching;'

                df_capjet_track = pd.read_sql(sql_query_capjet_track, conn)
                if df_capjet_track.empty:
                    QMessageBox.critical(self.dlg,
                                         'Import Capjet Track error',
                                         "Seems like the Capjet Track table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_CJ_track_table.csv'
                    df_capjet_track.to_csv(name_csv, index=False)
                    # df_rpl.to_csv("C:\\temp\\test0101.csv", index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing",str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF Trencher Track", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)


                    """
                    Adding line feature based on the points, qgis:pointstopath
                    2020-02-08 kele 
                    """
                    if self.dlg.cB_capjet_lin.isChecked():
                        print('Creating capjet track line feature')
                        layer = iface.activeLayer()
                        print('Selected Layer name is {}'.format(layer.name()))
                        alg_params = {
                             'DATE_FORMAT': '',
                             'INPUT': layer,
                             'ORDER_FIELD': 'kp',
                             'GROUP_FIELD': 'trenching_id',     # no grouping on as-laid
                             'OUTPUT': 'TEMPORARY_OUTPUT'   # temporary layer
                        }
                        result = processing.run('qgis:pointstopath', alg_params )
                        # TODO:add a tst too see if the process was a success
                        # if not result.isValid():  -does not work as isValid does not work for dictionaries
                        # print('processing failed')
                        QgsProject.instance().addMapLayer(result['OUTPUT']) # showing layer on
                        layer = iface.activeLayer()
                        print('success generating path from {} with the following output name: {}'.format(layer.name(),
                                                                                              result['OUTPUT'].name()))
                        layer.setName('MF Trencher Track_Line')     # renaming layer
                        layer.loadNamedStyle(
                            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'TID_trenched.qml'))

                        # Create different colors for categorized layers
                        self.create_categorized_layers(layer, "trenching_id")
                        """
                        Set Visible Layers
                        """
                        node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                        if node:
                            node.setItemVisibilityChecked(False)
                        self.iface.zoomToActiveLayer()
                    msg = "Sucessfully imported Trencher Track as layer: MF Trencher Track"
                    QgsMessageLog.logMessage(
                        'Task "{name}" completed\n'
                        '"{msg}")'.format(
                            name="Import Trencher Track",
                            msg=msg),
                        MESSAGE_CATEGORY, Qgis.Success)
                    # QMessageBox.information(self.iface.mainWindow(),
                    #                         'Sucessfully Imported Trencher Track',
                    #                         "Sucessfully imported Trencher Track as layer: \n MF Trencher Track")

            if self.dlg.cB_astrenched.isChecked():
                conn = self.initDBConnection()
                if conn is None:
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile ',
                                         "You have not selected a valid Masterfile Database, please do so.\nExiting...")
                    self.close_master_file_connect_signals()
                    return
                print("Start Importing As-Trenched")
                #sql_query_as_trenched_old = 'SELECT * FROM as_trenched;'
                sql_query_as_trenched = 'SELECT * FROM NxN_Last_Pass;'
                # sql_query_as_trenched = "SELECT max(as_trenched.sid_id), as_trenched.easting, as_trenched.northing, as_trenched.origin_seabed_level, as_trenched.depth_pipe, as_trenched.pipe_DCC, as_trenched.depth_of_lowering, as_trenched.depth_of_cover, as_trenched.trench_width, as_trenched.depth_to_cover,depth_pipe_cover " \
                #            "FROM rpl" \
                #            "LEFT JOIN as_trenched on rpl.kp = as_trenched.kp" \
                #            "WHERE rpl.kp <= 120 AND rpl.KP >= 0.065" \
                #            "GROUP BY rpl.kp ;"

                df_as_trenched = pd.read_sql(sql_query_as_trenched, conn)

                if df_as_trenched.empty:
                    QMessageBox.critical(self.dlg,
                                         'Import As-Trenched error',
                                         "Seems like the As-Trenched table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_AT_table.csv'
                    df_as_trenched.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing", str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF AT-X Pipe Pos", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)

                    """
                    Adding line feature based on the points, qgis:pointstopath
                    2020-02-08 kele 
                    """
                    if self.dlg.cB_astrenched_lin.isChecked():
                        print('Creating as-trenched line feature')
                        layer = iface.activeLayer()
                        print('Selected Layer name is {}'.format(layer.name()))
                        alg_params = {
                             'DATE_FORMAT': '',
                             'INPUT': layer,
                             'ORDER_FIELD': 'kp',
                             'GROUP_FIELD': 'max_sid',     # grouping on SID ID
                             'OUTPUT': 'TEMPORARY_OUTPUT'   # temporary layer, Path given name
                        }

                        result = processing.run('qgis:pointstopath', alg_params)
                        QgsProject.instance().addMapLayer(result['OUTPUT'])  # showing layer on
                        layer = iface.activeLayer()
                        print('success generating path from {} with the following output name: {}'.format(layer.name(),
                                                                                              result['OUTPUT'].name()))
                        layer = iface.activeLayer()
                        layer.setName('MF AT-X Pipe Pos_Line')     # renaming layer
                        layer.loadNamedStyle(
                            os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'SID_as-trenched_2.qml'))

                        # Create different colors for categorized layers
                        self.create_categorized_layers(layer, "max_sid")
                        """
                        Set Visible Layers
                        """
                        node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                        if node:
                            node.setItemVisibilityChecked(False)
                        self.iface.zoomToActiveLayer()
                    msg = "Sucessfully imported As-Trenched Pipe Pos as layer: MF As-Trenched Pipe Pos"
                    QgsMessageLog.logMessage(
                        'Task "{name}" completed\n'
                        '"{msg}")'.format(
                            name="Import As-Trenched",
                            msg=msg),
                        MESSAGE_CATEGORY, Qgis.Success)
                    # QMessageBox.information(self.iface.mainWindow(),
                    #                         'Sucessfully Imported As-Trenched Pipe Pos',
                    #                         "Sucessfully imported As-Trenched Pipe Pos as layer: \n MasterFile As-Trenched Pipe Pos")

            if self.dlg.cB_events.isChecked():
                conn = self.initDBConnection()
                if conn is None:
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile ',
                                         "You have not selected a valid Masterfile Database, please do so.\nExiting...")
                    self.close_master_file_connect_signals()
                    return
                print("Start Importing Events")
                sql_query_events = 'SELECT * FROM events;'
                try:
                    df_events = pd.read_sql(sql_query_events, conn)
                except pd.io.sql.DatabaseError as e:
                    QMessageBox.critical(self.dlg,
                                         'Import Event error',
                                         "Seems like the Masterfile is corrupt: \n" + str(e) + "\n\nExiting...")
                    self.close_master_file_connect_signals()
                    return

                if df_events.empty:
                    QMessageBox.critical(self.dlg,
                                         'Import Event error',
                                         "Seems like the Event table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_events_table.csv'
                    df_events.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing",str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "MF Events", "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)
                    mylayer.loadNamedStyle(os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'MF_events.qml'))
                    mylayer.triggerRepaint()
                    mylayer.setLabelsEnabled(True)

                    """
                    Adding line feature based on events that can be linked, qgis:pointstopath
                    2020-03-09 dags
                    """
                    if self.dlg.cB_events_lin.isChecked():
                        print('Start creating Linked events line features (Freespans)')
                        sql_query_freespan = "SELECT kp, event_code, event_type " \
                                             "FROM events " \
                                             "WHERE event_code='FS' or event_code='FE' " \
                                             "ORDER BY kp ASC"
                        try:
                            df_freespan = pd.read_sql(sql_query_freespan, conn)
                            if df_freespan.empty:
                                print("No Freespan Events")
                            else:
                                df_linked_freespans = self.check_event_linking(df_freespan, 'FS', 'FE')
                                self.add_linked_events_to_proj(df_linked_freespans, epsg_code, 'Linked Events: Freespans')
                        except pd.io.sql.DatabaseError as e:
                            QMessageBox.critical(self.dlg,
                                                 'Import Linked Events: Freespans',
                                                 "Failed executing SQL Query: \n" + str(sql_query_freespan) + "\nErrorCode: " + str(e) + "\n\nSkipping this linked layer")
                            pass

                        print('Start creating Linked events line features (Exposures ES/EE)')
                        sql_query_exposures = "SELECT kp, event_type, event_code " \
                                              "FROM events " \
                                              "WHERE event_code == 'ES' or event_code =='EE' " \
                                              "ORDER by kp ASC;"
                        try:
                            df_exposures = pd.read_sql(sql_query_exposures, conn)
                            if df_exposures.empty:
                                print("No Exposure Events")
                            else:
                                df_linked_exposures = self.check_event_linking(df_exposures, 'ES', 'EE')
                                self.add_linked_events_to_proj(df_linked_exposures, epsg_code, 'Linked Events: Exposures')
                        except pd.io.sql.DatabaseError as e:
                            QMessageBox.critical(self.dlg,
                                                 'Import Linked Events: Exposures',
                                                 "Failed executing SQL Query: \n" + str(sql_query_exposures) + "\nErrorCode: " + str(e) + "\n\nSkipping this linked layer")
                            pass

                        print('Start creating Linked events line features (SIDS SIDS/SIDE)')
                        sql_query_sids = "SELECT kp, event_type, event_code " \
                                         "FROM events " \
                                         "WHERE event_code == 'SIDS' or event_code =='SIDE' " \
                                         "ORDER by kp ASC;"
                        try:
                            df_sids = pd.read_sql(sql_query_sids, conn)
                            if df_sids.empty:
                                print("No SIDS Events")
                            else:
                                df_linked_sids = self.check_event_linking(df_sids, 'SIDS', 'SIDE')
                                self.add_linked_events_to_proj(df_linked_sids, epsg_code, 'Linked Events: SID')
                        except pd.io.sql.DatabaseError as e:
                            QMessageBox.critical(self.dlg,
                                                 'Import Linked Events: SID',
                                                 "Failed executing SQL Query: \n" + str(
                                                     sql_query_exposures) + "\nErrorCode: " + str(
                                                     e) + "\n\nSkipping this linked layer")
                            pass
                        print('Start creating Linked events line features (Pumps ON/OFF PST PSP)')
                        sql_query_pumps = "SELECT kp, event_type, event_code " \
                                          "FROM events " \
                                          "WHERE event_code == 'PST' or event_code =='PSP' " \
                                          "ORDER by kp ASC;"
                        try:
                            df_pumps = pd.read_sql(sql_query_pumps, conn)
                            if df_pumps.empty:
                                print("No PUMP Events")
                            else:
                                df_linked_pumps = self.check_event_linking(df_pumps, 'PST', 'PSP')
                                self.add_linked_events_to_proj(df_linked_pumps, epsg_code, 'Linked Events: PUMPS')
                        except pd.io.sql.DatabaseError as e:
                            QMessageBox.critical(self.dlg,
                                                 'Import Linked Events: PUMPS',
                                                 "Failed executing SQL Query: \n" + str(
                                                     sql_query_exposures) + "\nErrorCode: " + str(
                                                     e) + "\n\nSkipping this linked layer")
                            pass
                    self.iface.zoomToActiveLayer()
                    msg = "Sucessfully imported Events as layer: MF Events"
                    QgsMessageLog.logMessage(
                        'Task "{name}" completed\n'
                        '"{msg}")'.format(
                            name="Import Events",
                            msg=msg),
                        MESSAGE_CATEGORY, Qgis.Success)
                    # QMessageBox.information(self.iface.mainWindow(),
                    #                      'Sucessfully Imported Events',
                    #                      "Sucessfully imported Events as layer: \n MasterFile Events")

            if self.dlg.cB_capjet_tid.isChecked():
                conn = self.initDBConnection()
                if conn is None:
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile ',
                                         "You have not selected a valid Masterfile Database, please do so.\nExiting...")
                    self.close_master_file_connect_signals()
                    return
                print("Start Capjet Track TID")
                print(self.dlg.comboBox_TID.currentText())
                tid_nr = float(str(self.dlg.comboBox_TID.currentText()))
                print(tid_nr)
                sql_query_capjet_track = 'SELECT * FROM trenching WHERE trenching_id =' + str(tid_nr) + ';'
                df_capjet_track = pd.read_sql(sql_query_capjet_track, conn)
                if df_capjet_track.empty:
                    QMessageBox.critical(self.dlg,
                                         'Import Capjet Track error',
                                         "Seems like the Capjet Track table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_TID_table.csv'
                    df_capjet_track.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing",str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "TID:%s Trencher Track" % str(tid_nr), "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)

                    """
                    Add TID Track as line layer also
                    """
                    print('Creating TID Track as line layer also')
                    alg_params = {
                        'DATE_FORMAT': '',
                        'INPUT': mylayer,
                        'ORDER_FIELD': 'kp',
                        'GROUP_FIELD': 'trenching_id',  # no grouping on as-laid
                        'OUTPUT': 'TEMPORARY_OUTPUT'  # temporary layer
                    }
                    result = processing.run('qgis:pointstopath', alg_params)
                    # TODO:add a tst too see if the process was a success
                    # if not result.isValid():  -does not work as isValid does not work for dictionaries
                    # print('processing failed')
                    tid_line_layer = QgsProject.instance().addMapLayer(result['OUTPUT'])  # showing layer on
                    print('success generating path from {} with the following output name: {}'.format(
                        tid_line_layer.name(),
                        result[
                            'OUTPUT'].name()))
                    tid_line_layer.setName("TID%s Trencher Track_Line" % str(tid_nr))  # renaming layer
                    tid_line_layer.loadNamedStyle(
                        os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'TID_trenched.qml'))
                    """
                    Set Visible Layers
                    """
                    node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                    if node:
                        node.setItemVisibilityChecked(False)
                    self.iface.zoomToActiveLayer()
                    msg = "Sucessfully imported Trencher Track as layer: \n TID" + str(tid_nr) + " Trencher Track_Line"
                    QgsMessageLog.logMessage(
                    'Task "{name}" completed\n'
                    '"{msg}")'.format(
                        name="Import TID",
                        msg=msg),
                    MESSAGE_CATEGORY, Qgis.Success)
                    # QMessageBox.information(self.iface.mainWindow(),
                    #                         'Sucessfully Imported Trencher Track TID' + str(tid_nr),
                    #                         "Sucessfully imported Trencher Track as layer: \n TID%s Trencher Track_Line" % str(tid_nr))

            if self.dlg.cB_astrenched_sid.isChecked():
                conn = self.initDBConnection()
                if conn is None:
                    QMessageBox.critical(self.dlg,
                                         'Select Masterfile ',
                                         "You have not selected a valid Masterfile Database, please do so.\nExiting...")
                    self.close_master_file_connect_signals()
                    return
                print("Start Importing As-Trenched")
                print(self.dlg.comboBox_SID.currentText())
                sid_nr = float(str(self.dlg.comboBox_SID.currentText()))
                print(sid_nr)
                sql_query_as_trenched = 'SELECT * FROM as_trenched WHERE sid_id=' + str(sid_nr) + ';'
                df_as_trenched = pd.read_sql(sql_query_as_trenched, conn)
                if df_as_trenched.empty:
                    QMessageBox.critical(self.dlg,
                                         'Import As-Trenched error',
                                         "Seems like the As-Trenched table in the Masterfile is empty \nExiting...")
                else:
                    if not os.path.exists('C:\\temp\\'):
                        os.makedirs('C:\\temp\\')
                    name_csv = 'C:\\temp\\temp_SID_table.csv'
                    df_as_trenched.to_csv(name_csv, index=False)
                    path = "file:///" + name_csv + "?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s&spatialIndex=Yes" % ("UTF-8", ",", "easting", "northing",str(epsg_code))
                    print("Path: " + path)
                    mylayer = QgsVectorLayer(path, "SID%s AT-X Pipe Pos" % str(sid_nr), "delimitedtext")
                    if not mylayer.isValid():
                        print("Layer is not valid")
                    project.addMapLayer(mylayer)

                    """
                    Add SID AT Track as line layer also
                    """
                    print('Creating SID AT Track as line layer also')
                    alg_params = {
                        'DATE_FORMAT': '',
                        'INPUT': mylayer,
                        'ORDER_FIELD': 'kp',
                        'GROUP_FIELD': 'sid_id',  # no grouping on as-laid
                        'OUTPUT': 'TEMPORARY_OUTPUT'  # temporary layer
                    }
                    result = processing.run('qgis:pointstopath', alg_params)
                    # TODO:add a tst too see if the process was a success
                    # if not result.isValid():  -does not work as isValid does not work for dictionaries
                    # print('processing failed')
                    at_line_layer = QgsProject.instance().addMapLayer(result['OUTPUT'])  # showing layer on
                    print('success generating path from {} with the following output name: {}'.format(at_line_layer.name(),
                                                                                                      result[
                                                                                                          'OUTPUT'].name()))
                    at_line_layer.setName("SID%s AT-X Pipe Pos_Line" % str(sid_nr))  # renaming layer
                    at_line_layer.loadNamedStyle(os.path.join(os.path.dirname(__file__), 'QGIS-styles', 'SID_as-trenched.qml'))
                    """
                    Set Visible Layers
                    """
                    node = QgsProject.instance().layerTreeRoot().findLayer(mylayer)
                    if node:
                        node.setItemVisibilityChecked(False)
                    self.iface.zoomToActiveLayer()
                    msg = "Sucessfully imported As-Trenched Pipe Pos as layer: SID" + str(sid_nr) + " AT-X Pipe Pos_Line"
                    QgsMessageLog.logMessage(
                        'Task "{name}" completed\n'
                        '"{msg}")'.format(
                            name="Import SIDs",
                            msg=msg),
                        MESSAGE_CATEGORY, Qgis.Success)
                    # QMessageBox.information(self.iface.mainWindow(),
                    #                         'Sucessfully Imported',
                    #                         "Sucessfully imported As-Trenched Pipe Pos as layer: \n SID%s AT-X Pipe Pos_Line" % str(sid_nr))
                print("Sucessfully Finished Program")

        self.close_master_file_connect_signals()

    def run_exportDialog(self):
        print("Running Export Dialogue")
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.export_first_start:
            self.export_first_start = False
            self.export_dlg = loadExportDialog()
        else:
            self.close_export_dlg()

        self.export_dlg.pB_Browse.clicked.connect(self.open_select_export_folder)
        self.export_dlg.pB_Refresh.clicked.connect(self.export_dlg_refresh)
        self.export_dlg.pB_Export.clicked.connect(self.export_dlg_export)
        self.export_dlg.pB_Cancel.clicked.connect(self.close_export_dlg)
        self.export_dlg.comboBoxPointLayers.currentIndexChanged.connect(self.build_name_attr_comboBox)
        self.export_dlg.cB_NoNameAttr.clicked.connect(self.export_on_state_changed)
        # show the dialog
        self.export_dlg.show()
        self.export_dlg_refresh()
        # Run the dialog event loop
        # result = self.export_dlg.exec_()

    def export_on_state_changed(self):
        if self.export_dlg.cB_NoNameAttr.isChecked():
            self.export_dlg.comboBoxNameAttr.setEnabled(False)
        else:
            self.export_dlg.comboBoxNameAttr.setEnabled(True)

    def export_dlg_refresh(self):
        self.export_dlg.comboBoxPointLayers.clear()
        layers = QgsProject.instance().mapLayers()

        for layer_id, layer in layers.items():
            if isinstance(layer, QgsVectorLayer):
                self.export_dlg.comboBoxPointLayers.addItem(str(layer.name()))

        # self.build_name_attr_comboBox()

    def export_dlg_export(self):
        # name = self.export_dlg.comboBoxPointLayers.currentText()
        # export_path = self.export_dlg.export_path.value()
        if self.export_dlg.export_path.value() == '':
            msg = "Export Directory does not exists: " + str(self.export_dlg.export_path.value()) + " Aborting..."
            QgsMessageLog.logMessage(msg, MESSAGE_CATEGORY, Qgis.Critical)
            QMessageBox.critical(self.export_dlg,
                                 'Export WP2 error', msg)
            return
        if not os.path.isdir(self.export_dlg.export_path.value()):
            os.makedirs(self.export_dlg.export_path.value())
        if not path.exists(self.export_dlg.export_path.value()):
            # print("File exists")
            msg = "Export Directory does not exists: " + str(self.export_dlg.export_path.value()) + " Aborting..."
            QgsMessageLog.logMessage(msg, MESSAGE_CATEGORY, Qgis.Critical)
            QMessageBox.critical(self.export_dlg,
                                 'Export WP2 error', msg)
            return

        export_path = os.path.join(self.export_dlg.export_path.value(), str(self.export_dlg.export_name.value()) )

        if len(QgsProject.instance().mapLayersByName(str(self.export_dlg.comboBoxPointLayers.currentText()))) == 0:
            print("Layer list is empty...")
            return
        elif len(QgsProject.instance().mapLayersByName(str(self.export_dlg.comboBoxPointLayers.currentText()))) > 1:
            print("Two layers has the same name, choosing the first one")

        selected_layer = QgsProject.instance().mapLayersByName(str(self.export_dlg.comboBoxPointLayers.currentText()))[0]

        iface.setActiveLayer(selected_layer)
        data = []

        ''' Decide what kind of export should be used'''
        if self.export_dlg.rB_wp.isChecked():
            # for feature in selected_layer.getFeatures():
            #     # feature name is Case insensitive
            #     if len(feature.attributes()) > 3:
            #         field_index = selected_layer.fields().indexFromName("Name")
            #         if field_index == -1:
            #             field_index = selected_layer.fields().indexFromName("event_description")
            #             if field_index == -1:
            #                 name = feature.attributes()[1]
            #                 qc_code = 2
            #             else:
            #                 name = feature["event_description"]
            #         else:
            #             name = feature["name"]
            #         field_index = selected_layer.fields().indexFromName("easting")
            #         if field_index == -1:
            #             field_index = selected_layer.fields().indexFromName("Easting")
            #             if field_index == -1:
            #                 east = feature.attributes()[2]
            #                 qc_code = 3
            #             else:
            #                 east = feature["Easting"]
            #         else:
            #             east = feature["easting"]
            #         field_index = selected_layer.fields().indexFromName("northing")
            #         if field_index == -1:
            #             field_index = selected_layer.fields().indexFromName("Northing")
            #             if field_index == -1:
            #                 north = feature.attributes()[3]
            #                 qc_code = 4
            #             else:
            #                 north = feature["Northing"]
            #         else:
            #             north = feature["northing"]
            #         data.append([name, east, north])
            #     else:
            #         qc_code = 1
            #         print("layer does not have enough attributes")
            #     # print(element)
            ''' Go through all layer types and extract eastings, northings and name'''
            for feat_num, feature in enumerate(selected_layer.getFeatures()):
                # show some information about the feature
                geom = feature.geometry()
                # print(geom.get())
                if self.export_dlg.cB_NoNameAttr.isChecked():
                    name = "WP" + str(feat_num).zfill(4)
                else:
                    attr_name = self.export_dlg.comboBoxNameAttr.currentText()
                    if attr_name == '':
                        QMessageBox.critical(self.export_dlg,
                                             'Select Name Waypoint', "Check the checkbox or choose a waypoint name")
                        return
                    else:
                        name = feature[str(attr_name)]
                geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                if geom.type() == QgsWkbTypes.PointGeometry:
                    # the geometry type can be of single or multi type
                    if geomSingleType:
                        x = geom.asPoint()
                        # print("Point: ", x.x())
                        east = x.x()
                        north = x.y()
                    else:
                        x = geom.asMultiPoint()
                        # print("MultiPoint: ", x)
                        for pnt in x:
                            east = pnt.x()
                            north = pnt.y()
                            # name = str(feat_num) + "_" + str(name)
                    data.append([str(name), east, north])
                elif geom.type() == QgsWkbTypes.LineGeometry:
                    if geomSingleType:
                        x = geom.asPolyline()
                        for pnt in x:
                            # print("Line: ", x, "length: ", geom.length())
                            east = pnt.x()
                            north = pnt.y()
                            data.append([str(name), east, north])
                    else:
                        x = geom.asMultiPolyline()
                        # print("MultiLine: ", x, "length: ", geom.length())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                east = pnt.x()
                                north = pnt.y()
                                # name = "ML" + str(feat_num) + "_Pt" + str(ml_num) + "_" + str(name)
                                data.append([str(name), east, north])
                elif geom.type() == QgsWkbTypes.PolygonGeometry:
                    if geomSingleType:
                        x = geom.asPolygon()
                        print("Polygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                                for pnt in line:
                                    ml_num += 1
                                    east = pnt.x()
                                    north = pnt.y()
                                    # name = "Polygon" + str(feat_num)
                                    data.append([str(name), east, north])
                    else:
                        x = geom.asMultiPolygon()
                        # print("MultiPolygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for what in line:
                                for pnt in what:
                                    ml_num += 1
                                    east = pnt.x()
                                    north = pnt.y()
                                    # name = "Polygon" + str(feat_num)
                                    data.append([str(name), east, north])
                elif geom.type() == QgsWkbTypes.Polygon:
                    '''
                    No geometry data, skipping export of these
                    '''
                else:
                    print("Unknown or invalid geometry: " + str(geom.type()))

            depth = 0
            fg_color = 0
            bg_color = 0
            # todo: Not really needed to include all parameters, pos + depth is good enough
            # todo: consider including color-palette for forgeground/background
            extra_param = [depth, fg_color, bg_color, 0.1, "Arial", 0.00, -10.1, "", 0.00, "", 1, 0.000, 0.000, 0.000, 0.05]

            column_names = ['name', 'easting', 'northing', 'altitude', 'fgcolor.palette',
                            'bgcolor.palette', 'textcolor.palette', 'fontname', 'fontsize',
                            'symbol.filled', 'symbolfont', 'symbolfontsize', 'note', 'titleformat',
                            'radius', 'extra circles', 'radiusinc', 'state']
            new_list = []

            for lin in data:
                lin = lin + extra_param
                new_list.append(lin)

            df = pd.DataFrame(new_list, columns=column_names)
            # print(df.head(5))
            export_path = export_path + ".wp2"
            df.to_csv(export_path, index=False, header=False, float_format='%.3f', quoting=csv.QUOTE_NONNUMERIC)
        elif self.export_dlg.rB_dis.isChecked():
            print("Displayline is selected")
            ''' Go through all layer types and extract eastings, northings and name'''
            for feat_num, feature in enumerate(selected_layer.getFeatures()):
                last_col = -1  # TODO Draws displayline export in one line, might split it and color it differently
                geom = feature.geometry()
                if feat_num == 0:
                    # data.append(["# " + str(datetime.now().strftime("%d.%m.%Y %H:%M:%S"))])
                    data.append([str(self.export_dlg.export_name.value())])
                    data.append([4, 0, 3])  # Set Green color
                    print("Appended data in start of file")
                geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                if geom.type() == QgsWkbTypes.PointGeometry:
                    # the geometry type can be of single or multi type
                    if geomSingleType:
                        x = geom.asPoint()
                        # print("Point: ", x.x())
                        east = x.x()
                        north = x.y()
                    else:
                        x = geom.asMultiPoint()
                        # print("MultiPoint: ", x)
                        for pnt in x:
                            east = pnt.x()
                            north = pnt.y()
                            # name = str(feat_num) + "_" + str(name)
                    data.append([east, north, last_col])
                elif geom.type() == QgsWkbTypes.LineGeometry:
                    if geomSingleType:
                        x = geom.asPolyline()
                        for pnt in x:
                            # print("Line: ", x, "length: ", geom.length())
                            east = pnt.x()
                            north = pnt.y()
                            data.append([east, north, last_col])
                    else:
                        x = geom.asMultiPolyline()
                        # print("MultiLine: ", x, "length: ", geom.length())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                east = pnt.x()
                                north = pnt.y()
                                # name = "ML" + str(feat_num) + "_Pt" + str(ml_num) + "_" + str(name)
                                data.append([east, north, last_col])
                elif geom.type() == QgsWkbTypes.PolygonGeometry:
                    if geomSingleType:
                        x = geom.asPolygon()
                        print("Polygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                east = pnt.x()
                                north = pnt.y()
                                # name = "Polygon" + str(feat_num)
                                data.append([east, north, last_col])
                    else:
                        x = geom.asMultiPolygon()
                        # print("MultiPolygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for what in line:
                                for pnt in what:
                                    ml_num += 1
                                    east = pnt.x()
                                    north = pnt.y()
                                    # name = "Polygon" + str(feat_num)
                                    data.append([east, north, last_col])
                elif geom.type() == QgsWkbTypes.Polygon:
                    '''
                    No geometry data, skipping export of these
                    '''
                else:
                    print("Unknown or invalid geometry")

            df = pd.DataFrame(data, columns=['easting', 'northing', 'marker'])
            df.iloc[2, 2] = -2  # First point, start drawing
            export_path = export_path + ".dis"
            # print(df.head())
            df.to_csv(export_path, index=False, header=False, sep=",", na_rep=None, quoting=csv.QUOTE_NONNUMERIC)
        elif self.export_dlg.rB_rln.isChecked():
            print("Runline is selected")
            ''' Go through all layer types and extract eastings, northings and name'''
            for feat_num, feature in enumerate(selected_layer.getFeatures()):
                geom = feature.geometry()
                if feat_num == 0:
                    data.append(["# " + str(datetime.now().strftime("%d.%m.%Y %H:%M:%S"))])
                    data.append([str(self.export_dlg.export_name.value())])
                    print("Appended data in start of file")
                # Not Valid for Runline export
                # if self.export_dlg.cB_NoNameAttr.isChecked():
                #     name = "Feature" + str(feat_num)
                # else:
                #     attr_name = self.export_dlg.comboBoxNameAttr.currentText()
                #     if attr_name == '':
                #         QMessageBox.critical(self.export_dlg,
                #                              'Select Name Waypoint', "Check the checkbox or choose a waypoint name")
                #         return
                #     else:
                #         name = feature[str(attr_name)]
                geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                if geom.type() == QgsWkbTypes.PointGeometry:
                    # the geometry type can be of single or multi type
                    if geomSingleType:
                        x = geom.asPoint()
                        # print("Point: ", x.x())
                        east = x.x()
                        north = x.y()
                    else:
                        x = geom.asMultiPoint()
                        # print("MultiPoint: ", x)
                        for pnt in x:
                            east = pnt.x()
                            north = pnt.y()
                            # name = str(feat_num) + "_" + str(name)
                    data.append([east, north])
                elif geom.type() == QgsWkbTypes.LineGeometry:
                    if geomSingleType:
                        x = geom.asPolyline()
                        for pnt in x:
                            # print("Line: ", x, "length: ", geom.length())
                            east = pnt.x()
                            north = pnt.y()
                            data.append([east, north])
                    else:
                        x = geom.asMultiPolyline()
                        # print("MultiLine: ", x, "length: ", geom.length())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                east = pnt.x()
                                north = pnt.y()
                                # name = "ML" + str(feat_num) + "_Pt" + str(ml_num) + "_" + str(name)
                                data.append([east, north])
                elif geom.type() == QgsWkbTypes.PolygonGeometry:
                    if geomSingleType:
                        x = geom.asPolygon()
                        print("Polygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                east = pnt.x()
                                north = pnt.y()
                                # name = "Polygon" + str(feat_num)
                                data.append([east, north])
                    else:
                        x = geom.asMultiPolygon()
                        # print("MultiPolygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for what in line:
                                for pnt in what:
                                    ml_num += 1
                                    east = pnt.x()
                                    north = pnt.y()
                                    # name = "Polygon" + str(feat_num)
                                    data.append([east, north])
                elif geom.type() == QgsWkbTypes.Polygon:
                    '''
                    No geometry data, skipping export of these
                    '''
                else:
                    print("Unknown or invalid geometry")

            df = pd.DataFrame(data, columns=['easting', 'northing'])
            export_path = export_path + ".rln"
            # print(df.head())
            df.to_csv(export_path, index=False, header=False, sep=" ", na_rep=None, float_format='%.3f', quoting=None)
            # fout = open(export_path, "wt")
            # for l in data:
            #     # fout.write(l)
            #     print(l)
            # fout.close()
        elif self.export_dlg.rB_dig.isChecked():
            print("Digitized line is selected")

            ''' Go through all layer types and extract eastings, northings and name'''
            for feat_num, feature in enumerate(selected_layer.getFeatures()):
                if self.export_dlg.cB_NoNameAttr.isChecked():
                    depth = 0.00000  # Depth set to default 0
                else:
                    attr_name = self.export_dlg.comboBoxNameAttr.currentText()
                    if attr_name == '':
                        err_msg = "Untick the checkbox or choose a table attribute for digitized line depth"
                        QMessageBox.critical(self.export_dlg,
                                             'Select Depth Attribute',
                                             err_msg)
                        return
                    else:
                        depth = feature[str(attr_name)]
                geom = feature.geometry()
                geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                if geom.type() == QgsWkbTypes.PointGeometry:
                    # the geometry type can be of single or multi type
                    if geomSingleType:
                        x = geom.asPoint()
                        # print("Point: ", x.x())
                        east = x.x()
                        north = x.y()
                    else:
                        x = geom.asMultiPoint()
                        # print("MultiPoint: ", x)
                        for pnt in x:
                            east = pnt.x()
                            north = pnt.y()
                            # name = str(feat_num) + "_" + str(name)
                    data.append([east, north, depth])
                elif geom.type() == QgsWkbTypes.LineGeometry:
                    if geomSingleType:
                        x = geom.asPolyline()
                        for pnt in x:
                            # print("Line: ", x, "length: ", geom.length())
                            east = pnt.x()
                            north = pnt.y()
                            data.append([east, north, depth])
                    else:
                        x = geom.asMultiPolyline()
                        # print("MultiLine: ", x, "length: ", geom.length())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                east = pnt.x()
                                north = pnt.y()
                                # name = "ML" + str(feat_num) + "_Pt" + str(ml_num) + "_" + str(name)
                                data.append([east, north, depth])
                elif geom.type() == QgsWkbTypes.PolygonGeometry:
                    if geomSingleType:
                        x = geom.asPolygon()
                        print("Polygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                east = pnt.x()
                                north = pnt.y()
                                # name = "Polygon" + str(feat_num)
                                data.append([east, north, depth])
                    else:
                        x = geom.asMultiPolygon()
                        # print("MultiPolygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for what in line:
                                for pnt in what:
                                    ml_num += 1
                                    east = pnt.x()
                                    north = pnt.y()
                                    # name = "Polygon" + str(feat_num)
                                    data.append([east, north, depth])
                elif geom.type() == QgsWkbTypes.Polygon:
                    '''
                    No geometry data, skipping export of these
                    '''
                else:
                    print("Unknown or invalid geometry")

            df = pd.DataFrame(data, columns=['easting', 'northing', 'depth'])
            df = df.round(5)
            export_path = export_path + ".dig"
            # print(df.head())
            df.to_csv(export_path, index=False, header=['#unit=m', 'm', 'm'], sep=" ", float_format='%.5f', quoting=None)
        elif self.export_dlg.rB_kongs.isChecked():
            print("Kongsberg export is selected")
            epsg_code = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
            sourceCrs = QgsCoordinateReferenceSystem(epsg_code)
            destCrs = QgsCoordinateReferenceSystem(4326)
            tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())

            ''' Go through all layer types and extract eastings, northings and name'''
            for feat_num, feature in enumerate(selected_layer.getFeatures()):
                # show some information about the feature
                geom = feature.geometry()
                geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
                if geom.type() == QgsWkbTypes.PointGeometry:
                    # the geometry type can be of single or multi type
                    if geomSingleType:
                        geom.transform(tr)
                        x = geom.asPoint()
                        deg_lat, mnt_lat, sec_lat = decdeg2dms(x.x())
                        mnt_lat = mnt_lat + sec_lat / 60
                        if deg_lat >= 0:
                            hemis_NS = 'N'
                        elif deg_lat < 0:
                            hemis_NS = 'S'
                        else:
                            hemis_NS = '-'

                        deg_long, mnt_long, sec_long = decdeg2dms(x.y())
                        mnt_long = mnt_long + sec_long / 60
                        if deg_long >= 0:
                            hemis_EW = 'E'
                        elif deg_lat < 0:
                            hemis_EW = 'W'
                        else:
                            hemis_EW = '-'

                    else:
                        geom.transform(tr)
                        x = geom.asMultiPoint()
                        # print("MultiPoint: ", x)
                        for pnt in x:
                            deg_lat, mnt_lat, sec_lat = decdeg2dms(pnt.x())
                            mnt_lat = mnt_lat + sec_lat / 60
                            if deg_lat >= 0:
                                hemis_NS = 'N'
                            elif deg_lat < 0:
                                hemis_NS = 'S'
                            else:
                                hemis_NS = '-'
                            deg_long, mnt_long, sec_long = decdeg2dms(pnt.y())
                            mnt_long = mnt_long + sec_long / 60
                            if deg_long >= 0:
                                hemis_EW = 'E'
                            elif deg_lat < 0:
                                hemis_EW = 'W'
                            else:
                                hemis_EW = '-'
                    data.append([hemis_NS, int(deg_lat), round(mnt_lat, 6), hemis_EW, int(deg_long), round(mnt_long, 6)])
                elif geom.type() == QgsWkbTypes.LineGeometry:
                    if geomSingleType:
                        geom.transform(tr)
                        x = geom.asPolyline()
                        for pnt in x:
                            deg_lat, mnt_lat, sec_lat = decdeg2dms(pnt.x())
                            mnt_lat = mnt_lat + sec_lat / 60
                            if deg_lat >= 0:
                                hemis_NS = 'N'
                            elif deg_lat < 0:
                                hemis_NS = 'S'
                            else:
                                hemis_NS = '-'
                            deg_long, mnt_long, sec_long = decdeg2dms(pnt.y())
                            mnt_long = mnt_long + sec_long / 60
                            if deg_long >= 0:
                                hemis_EW = 'E'
                            elif deg_lat < 0:
                                hemis_EW = 'W'
                            else:
                                hemis_EW = '-'
                            data.append([hemis_NS, int(deg_lat), round(mnt_lat, 6), hemis_EW, int(deg_long), round(mnt_long, 6)])
                    else:
                        geom.transform(tr)
                        x = geom.asMultiPolyline()
                        # print("MultiLine: ", x, "length: ", geom.length())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                deg_lat, mnt_lat, sec_lat = decdeg2dms(pnt.x())
                                mnt_lat = mnt_lat + sec_lat / 60
                                if deg_lat >= 0:
                                    hemis_NS = 'N'
                                elif deg_lat < 0:
                                    hemis_NS = 'S'
                                else:
                                    hemis_NS = '-'
                                deg_long, mnt_long, sec_long = decdeg2dms(pnt.y())
                                mnt_long = mnt_long + sec_long / 60
                                if deg_long >= 0:
                                    hemis_EW = 'E'
                                elif deg_lat < 0:
                                    hemis_EW = 'W'
                                else:
                                    hemis_EW = '-'
                                data.append([hemis_NS, int(deg_lat), round(mnt_lat, 6), hemis_EW, int(deg_long), round(mnt_long, 6)])
                elif geom.type() == QgsWkbTypes.PolygonGeometry:
                    if geomSingleType:
                        geom.transform(tr)
                        x = geom.asPolygon()
                        print("Polygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for pnt in line:
                                ml_num += 1
                                deg_lat, mnt_lat, sec_lat = decdeg2dms(pnt.x())
                                mnt_lat = mnt_lat + sec_lat / 60
                                if deg_lat >= 0:
                                    hemis_NS = 'N'
                                elif deg_lat < 0:
                                    hemis_NS = 'S'
                                else:
                                    hemis_NS = '-'
                                deg_long, mnt_long, sec_long = decdeg2dms(pnt.y())
                                mnt_long = mnt_long + sec_long / 60
                                if deg_long >= 0:
                                    hemis_EW = 'E'
                                elif deg_lat < 0:
                                    hemis_EW = 'W'
                                else:
                                    hemis_EW = '-'
                                data.append([hemis_NS, int(deg_lat), round(mnt_lat, 6), hemis_EW, int(deg_long), round(mnt_long, 6)])
                    else:
                        geom.transform(tr)
                        x = geom.asMultiPolygon()
                        # print("MultiPolygon: ", x, "Area: ", geom.area())
                        ml_num = 0
                        for line in x:
                            for what in line:
                                for pnt in what:
                                    ml_num += 1
                                    deg_lat, mnt_lat, sec_lat = decdeg2dms(pnt.x())
                                    mnt_lat = mnt_lat + sec_lat / 60
                                    if deg_lat >= 0:
                                        hemis_NS = 'N'
                                    elif deg_lat < 0:
                                        hemis_NS = 'S'
                                    else:
                                        hemis_NS = '-'
                                    deg_long, mnt_long, sec_long = decdeg2dms(pnt.y())
                                    mnt_long = mnt_long + sec_long / 60
                                    if deg_long >= 0:
                                        hemis_EW = 'E'
                                    elif deg_lat < 0:
                                        hemis_EW = 'W'
                                    else:
                                        hemis_EW = '-'
                                    data.append([hemis_NS, int(deg_lat), round(mnt_lat, 6), hemis_EW, int(deg_long), round(mnt_long, 6)])
                elif geom.type() == QgsWkbTypes.Polygon:
                    '''
                    No geometry data, skipping export of these
                    '''
                else:
                    print("Unknown or invalid geometry: " + str(geom.type()))
            extra_param = ['WP', 0, 0.000, 0.2500, 200.00]

            column_names = ['WPId', 'WPHemisNS', 'WPLatDeg', 'WPLatMin', 'WPHemisEW', 'WPLonDeg',
                            'WPLonMin', 'WPFormat', 'WPLegType', 'WPHead', 'WPSpeed', 'WPTurnRad']
            column_names_export = ['WPFormat', 'WPId', 'WPHemisNS', 'WPLatDeg', 'WPLatMin', 'WPHemisEW', 'WPLonDeg',
                            'WPLonMin', 'WPLegType', 'WPHead', 'WPSpeed', 'WPTurnRad']

            new_list = []
            for i, lin in enumerate(data):
                lin = [i+1] + lin + extra_param
                new_list.append(lin)

            df = pd.DataFrame(new_list, columns=column_names)
            now = datetime.utcnow()
            day = now.strftime("%A")
            month = now.strftime("%B")
            date = now.strftime("%d")
            year = now.strftime("%Y")
            time = now.strftime("%H:%M:%S")
            kongsberg_header = "CreateDate (UTC)," + str(day) + ", " + str(month) + " " + str(date) + ", " + str(year) + " " + str(time) + \
                               "\nVersion,4" \
                               "\nTrackName," + str(self.export_dlg.comboBoxPointLayers.currentText()) + \
                               "\nNoOfWp," + str(len(new_list)) + \
                               "\nDatum,WGS84"
            export_path = export_path + ".txt"
            df.to_csv(export_path, index=False, sep=",", na_rep=None, columns=column_names_export)
            # here we are trying to read the data from the file
            with open(export_path, "r+") as f:
                a = f.read()
                # Now writing into the file with the prepend line + old file data
                with open(export_path, "w+") as f:
                    f.write(kongsberg_header + "\n" + a + "END")
        else:
            print("Radiobutton is not selected, something is wrong...")

        msg = "Successfully exported WP2 file to: " + str(export_path)
        print(msg)
        QgsMessageLog.logMessage(msg, MESSAGE_CATEGORY, Qgis.Success)
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Successfully exported WP2 file")
        msgbox.setText('Do you want to open the exported file in Notepad for QC?')
        msgbox.addButton(QMessageBox.Yes)
        msgbox.addButton(QMessageBox.Cancel)

        msgbox.addButton('Open Folder', QMessageBox.YesRole)
        bttn = msgbox.exec_()
        if bttn == 16384:
            ''' YES'''
            # os.popen('notepad ' + export_path)
            subprocess.Popen(['notepad.exe', export_path], shell=True,
             stdin=None, stdout=None, stderr=None, close_fds=True)
        elif bttn == 4194304:
            '''Cancel'''
        elif bttn == 0:
            ''' Open Folder'''
            # os.popen('explorer ' + os.path.dirname(export_path))
            subprocess.call(['explorer', os.path.dirname(export_path)], shell=True,
             stdin=None, stdout=None, stderr=None, close_fds=True)

    def close_export_dlg(self):
        try:
            self.export_dlg.pB_Browse.clicked.disconnect(self.open_select_export_folder)
            self.export_dlg.pB_Refresh.clicked.disconnect(self.export_dlg_refresh)
            self.export_dlg.pB_Export.clicked.disconnect(self.export_dlg_export)
            self.export_dlg.comboBoxPointLayers.currentIndexChanged.disconnect(self.build_name_attr_comboBox)
            self.export_dlg.pB_Cancel.clicked.disconnect(self.close_export_dlg)
            self.export_dlg.close()
        except:
            print("Didnt have to disconnect")

    def build_name_attr_comboBox(self):
        layer_name = str(self.export_dlg.comboBoxPointLayers.currentText())
        print("You selected: " + layer_name)
        if layer_name != '':
            selected_layer = QgsProject.instance().mapLayersByName(layer_name)[0]
            self.export_dlg.comboBoxNameAttr.clear()
            for field in selected_layer.fields():
                # print(field.name(), field.typeName())
                self.export_dlg.comboBoxNameAttr.addItem(str(field.name()))


def decdeg2dms(dd):
    mnt, sec = divmod(dd*3600, 60)
    deg, mnt = divmod(mnt, 60)
    return deg, mnt, sec
